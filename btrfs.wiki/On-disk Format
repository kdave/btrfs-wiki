This document describes the Btrfs on‐disk format.


== Overview ==

Aside from the superblock, Btrfs consists entirely of several trees. The trees use copy-on-write. Trees are stored in nodes, each of with belong to a level in the b-tree structure. Internal nodes contain references to other internal nodes on the next level, or to leaf nodes then the level reaches zero. Leaf nodes contain various types of data structures, depending on the tree.

Btrfs makes a distinction between logical and physical addresses. Logical addresses are used in the filesystem structures, while physical addresses are simply byte offsets on a disk. One logical address may correspond to physical addresses on any number of disks, depending on RAID settings. The chunk tree is used to convert from logical addresses to physical addresses; the dev tree can be used for the reverse.

For bootstrapping purposes, the superblock contains a subset of the chunk tree, specifically it contains "chunk items" for all system chunks. The superblock also contains a logical reference to root nodes in the root and chunk trees, which can then be used to locate all the other trees and data stored.

TODO Subvolumes and snapshots.

== Basic Structures ==

Note that the fields are unsigned, so object ID −1 will be treated as ffffffffffffffff and sorted to the end of the tree. Since Btrfs uses little‐endian, a simple byte‐by‐byte comparison of KEYs will not work.

{| class="wikitable" border="1"
|+  KEY
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 8
| UINT
| Object ID. Each tree has its own set of Object IDs.
|-
| align="right" | 8
| align="right" | 1
| UINT
|
[[#Item Types|Item type]].
|-
| align="right" | 9
| align="right" | 8
| UINT
| Offset. The meaning depends on the item type.
|-
| colspan="4" | 11
|}

Btrfs uses [http://en.wikipedia.org/wiki/Unix_time Unix time].

{| class="wikitable" border="1"
|+  TIME
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 8
| SINT
| Number of seconds since 1970-01-01T00:00:00Z.
|-
| align="right" | 8
| align="right" | 4
| UINT
| Number of nanoseconds since the beginning of the second.
|-
| colspan="4" | c
|}

=== Superblock ===

The primary superblock is located at 0x1 0000 (64<sub>10</sub> KiB). Mirror copies of the superblock are located at physical addresses 0x400 0000 (64<sub>10</sub> MiB) and 0x40 0000 0000 (256<sub>10</sub> GiB), if these locations are valid. Superblock copies are updated simultaneously. During mount btrfs' kernel module reads only the first super block (at 64k), if an error is detected mounting fails.

Note that btrfs only recognizes disks with a valid 0x1 0000 superblock; otherwise, there would be confusion with other filesystems.

TODO

{| class="wikitable" border="1"
|+  Superblock
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 20
| CSUM
| Checksum of everything past this field (from 20 to 1000)
|-
| align="right" | 20
| align="right" | 10
| UUID
| FS UUID
|-
| align="right" | 30
| align="right" | 8
| UINT
| physical address of this block (different for mirrors)
|-
| align="right" | 38
| align="right" | 8
|
| flags
|-
| align="right" | 40
| align="right" | 8
| ASCII
| magic ("_BHRfS_M")
|-
| align="right" | 48
| align="right" | 8
|
| generation
|-
| align="right" | 50
| align="right" | 8
|
| logical address of the root tree root
|-
| align="right" | 58
| align="right" | 8
|
|
logical address of the [[#Chunk tree .283.29|chunk tree]] root
|-
| align="right" | 60
| align="right" | 8
|
| logical address of the log tree root
|-
| align="right" | 68
| align="right" | 8
|
| log_root_transid
|-
| align="right" | 70
| align="right" | 8
|
| total_bytes
|-
| align="right" | 78
| align="right" | 8
|
| bytes_used
|-
| align="right" | 80
| align="right" | 8
|
| root_dir_objectid (usually 6)
|-
| align="right" | 88
| align="right" | 8
|
| num_devices
|-
| align="right" | 90
| align="right" | 4
|
| sectorsize
|-
| align="right" | 94
| align="right" | 4
|
| nodesize
|-
| align="right" | 98
| align="right" | 4
|
| leafsize
|-
| align="right" | 9c
| align="right" | 4
|
| stripesize
|-
| align="right" | a0
| align="right" | 4
|
| sys_chunk_array_size
|-
| align="right" | a4
| align="right" | 8
|
| chunk_root_generation
|-
| align="right" | ac
| align="right" | 8
|
| compat_flags
|-
| align="right" | b4
| align="right" | 8
|
| compat_ro_flags - only implementations that support the flags can write to the filesystem
|-
| align="right" | bc
| align="right" | 8
|
| incompat_flags - only implementations that support the flags can use the filesystem
|-
| align="right" | c4
| align="right" | 2
|
| csum_type - Btrfs currently uses the CRC32c little-endian hash function with seed -1.
|-
| align="right" | c6
| align="right" | 1
|
| root_level
|-
| align="right" | c7
| align="right" | 1
|
| chunk_root_level
|-
| align="right" | c8
| align="right" | 1
|
| log_root_level
|-
| align="right" | c9
| align="right" | 62
|
|
[[#DEV ITEM .28d8.29|DEV_ITEM]] data for this device
|-
| align="right" | 12b
| align="right" | 100
|
| label (may not contain '/' or '\\')
|-
| align="right" | 22b
| align="right" | 8
|
| cache_generation
|-
| align="right" | 233
| align="right" | 8
|
| uuid_tree_generation
|-
| align="right" | 23b
| align="right" | f0
|
| reserved /* future expansion */
|-
| align="right" | 32b
| align="right" | 800
|
|
sys_chunk_array:(''n'' bytes valid) Contains (KEY, [[#CHUNK ITEM .28e4.29|CHUNK_ITEM]]) pairs for all SYSTEM chunks. This is needed to bootstrap the mapping from logical addresses to physical.
|-
| align="right" | b2b
| align="right" | 2a0
|
| Contain super_roots (4 btrfs_root_backup)
|-
| align="right" | dcb
| align="right" | 235
|
| current unused
|-
| colspan="4" | 1000
|}

=== Header ===

This is the data stored at the start of every node. The data following it depends on whether it is an internal or leaf node, both of which are described below.

{| class="wikitable" border="1"
|+  Header
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 20
| CSUM
| Checksum of everything after this field (from 20 to the end of the node)
|-
| align="right" | 20
| align="right" | 10
| UUID
| FS UUID
|-
| align="right" | 30
| align="right" | 8
| UINT
| Logical address of this node
|-
| align="right" | 38
| align="right" | 7
| FIELD
| Flags
|-
| align="right" | 3f
| align="right" | 1
| UINT
| Backref. Rev.: always 1 (MIXED) for new filesystems; 0 (OLD) indicates an old filesystem.
|-
| align="right" | 40
| align="right" | 10
| UUID
| Chunk tree UUID
|-
| align="right" | 50
| align="right" | 8
| UINT
| Generation
|-
| align="right" | 58
| align="right" | 8
| UINT
| The ID of the tree that contains this node
|-
| align="right" | 60
| align="right" | 4
| UINT
| Number of items
|-
| align="right" | 64
| align="right" | 1
| UINT
| Level (0 for leaf nodes)
|-
| colspan="4" | 65
|}

=== Internal Node ===

In internal nodes, the node header is followed by a number of key pointers.

{| class="wikitable" border="1"
|+  Key Pointer
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 11
| KEY
| key
|-
| align="right" | 11
| align="right" | 8
| UINT
| block number
|-
| align="right" | 19
| align="right" | 8
| UINT
| generation
|-
| colspan="4" | 21
|}

{| border="1"
|+  Internal Node Layout
|-
| header
| key ptr
| key ptr
| key ptr
| ...
| free space
|}

=== Leaf Node ===

In leaf nodes, the node header is followed by a number of items. The items' data is stored at the end of the node, and the contents of the item data depends on the item type stored in the key.

{| class="wikitable" border="1"
|+  Item
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 11
| KEY
| key
|-
| align="right" | 11
| align="right" | 4
| UINT
| data offset relative to end of header (65)
|-
| align="right" | 15
| align="right" | 4
| UINT
| data size
|-
| colspan="4" | 19
|}

{| border="1"
|+  Leaf Node Layout
|-
| header
| item 0
| item 1
| ...
| item N
| free space
| data N
| ...
| data 1
| data 0
|}

== Object Types ==

TODO

== Objects ==

=== <div id="ROOT_TREE">ROOT_TREE (1)</div> ===

The root tree holds ROOT_ITEMs, ROOT_REFs, and ROOT_BACKREFs for every tree other than itself. It is used to find the other trees and to determine the subvolume structure. It also holds the items for the [[#Root tree directory|root tree directory]]. The logical address of the root tree is stored in the [[#Superblock|superblock]].

====Reserved objectids====
There are several well-known objectids that refer to internal trees.

All root objectids between <code>[[#BTRFS_FIRST_FREE_OBJECTID|BTRFS_FIRST_FREE_OBJECTID]] = 256ULL</code> and <code>[[#BTRFS_LAST_FREE_OBJECTID|BTRFS_LAST_FREE_OBJECTID]] = -256ULL</code> refer to file trees.

Otherwise, the objectid should be considered reserved for internal use.

*<code><div id="BTRFS_ROOT_TREE_OBJECTID">BTRFS_ROOT_TREE_OBJECTID = 1</div></code>
:The object id that refers to the <code>ROOT_TREE</code> itself.
*<code><div id="BTRFS_EXTENT_TREE_OBJECTID">BTRFS_EXTENT_TREE_OBJECTID = 2</div></code>
:The objectid that refers to the <code>[[#EXTENT_TREE|EXTENT_TREE]]</code>.
*<code><div id="BTRFS_CHUNK_TREE_OBJECTID">BTRFS_CHUNK_TREE_OBJECTID = 3</div></code>
:The objectid that refers to the root of the <code>[[#CHUNK_TREE|CHUNK_TREE]]</code>
*<code><div id="BTRFS_DEV_TREE_OBJECTID">BTRFS_DEV_TREE_OBJECTID = 4</div></code>
:The objectid that refers to the root of the <code>[[#DEV_TREE|DEV_TREE]]</code>.
*<code><div id="BTRFS_FS_TREE_OBJECTID">BTRFS_FS_TREE_OBJECTID = 5</div></code>
:The objectid that refers to the global <code>[[#FS_TREE|FS_TREE]] root.</code>
*<code><div id="BTRFS_CSUM_TREE_OBJECTID">BTRFS_CSUM_TREE_OBJECTID = 7</div></code>
:The objectid that refers to the <code>[[#CSUM_TREE|CSUM_TREE]]</code>.
*<code><div id="BTRFS_QUOTA_TREE_OBJECTID">BTRFS_QUOTA_TREE_OBJECTID = 8</div></code>
:The objectid that refers to the <code>[[#QUOTA_TREE|QUOTA_TREE]]</code>.
*<code><div id="BTRFS_UUID_TREE_OBJECTID">BTRFS_UUID_TREE_OBJECTID = 9</div></code>
:The objectid that refers to the <code>[[#UUID_TREE|UUID_TREE]]</code>.
*<code><div id="BTRFS_FREE_SPACE_TREE_OBJECTID">BTRFS_FREE_SPACE_TREE_OBJECTID = 10</div></code>
:The objectid that refers to the <code>[[#FREE_SPACE_TREE|FREE_SPACE_TREE]]</code>.
*<code><div id="BTRFS_TREE_LOG_OBJECTID">BTRFS_TREE_LOG_OBJECTID = -7ULL</div></code>
:The objectid that refers to the <code>[[#TREE_LOG|TREE_LOG]]</code> tree.
*<code><div id="BTRFS_TREE_RELOC_OBJECTID">BTRFS_TREE_RELOC_OBJECTID = -8ULL</div></code>
:The objectid that refers to the <code>[[#TREE_RELOC|TREE_RELOC]]</code> tree.
*<code><div id="BTRFS_DATA_RELOC_TREE_OBJECTID">BTRFS_DATA_RELOC_TREE_OBJECTID = -9ULL</div></code>
:The objectid that refers to the <code>[[#DATA_RELOC|DATA_RELOC]]</code> tree.


The following are well-known objectids within the <code>ROOT_TREE</code> that do not refer to other trees.

*<code><div id="BTRFS_ROOT_TREE_DIR_OBJECTID">BTRFS_ROOT_TREE_DIR_OBJECTID = 6</div></code>
:The objectid that refers to the directory within the root tree. If it exists, it will have the usual items used to implement a directory associated with it.
:There will only be a single entry called <code>default</code> that points to a key to be used as the <i>root directory</i> on the file system instead of the <code>[[#FS_TREE|FS_TREE]]</code>.
*<code><div id="BTRFS_ORPHAN_OBJECTID">BTRFS_ORPHAN_OBJECTID = -5ULL</div></code>
:The objectid used for [[#ROOT_TREE_orphans|orphan root]] tracking.

<b>Developer note:</b> If implementing a feature that requires a new objectid in the reserved range, you <b>must</b> reserve the objectid via the mailing list before posting your code for general use. This is a <i>disk format change</i>.

====<div id="ROOT_TREE_orphans">Orphans</div>====
Removing a root is a multi-step process that may involve many transactions. References to every extent used by the tree must be decremented and, if they hit zero, the extents must be released. It is possible that the system crashes, loses power, or otherwise encounters an error during root removal. Without additional information, the file system could ultimately contain partially removed roots, which would make it <i>inconsistent</i>. When a root is removed, it performs several small operations in a single transaction in preparation for removal. This process should be familiar to those with an understanding of how orphans work when an inode is unlinked on any UNIX-style file system.

#Unlink the root from the directory that contains it.
#Initialize the <code>[[Data_Structures#btrfs_root_item|drop_progress]]</code> and <code>[[Data_Structures#btrfs_root_item|drop_level]]</code> fields and set the <code>[[Data_Structures#btrfs_root_item|refs]]</code> field to <code>0</code> in the <code>[[#ROOT_ITEM|ROOT_ITEM]]</code>.
#If an orphan key for this root has not already been inserted into the tree, insert one.
#Remove the UUID entries for this root and any associated received root from the <code>[[#UUID_TREE|UUID_TREE]]</code>.

Ultimately, the cleaner thread handles the reference count adjustments and, once that is complete, the root has been successfully removed and it removes the orphan key for that root. As the cleaner progresses, the <code>drop_progress</code> and <code>drop_level</code> fields are updated to reflect the most recently processed item.

This process may be interrupted at any time and it must be recoverable. The orphan key is how btrfs avoids inconsistencies when that occurs. The orphan key is located in the <code>ROOT_TREE</code> and is of the following form.

{|class="wikitable"
!colspan="3"|struct btrfs_key
|-
!<code>objectid</code>
!<code>type</code>
!<code>offset</code>
|-
|<code>BTRFS_ORPHAN_OBJECTID [-5ULL]</code>
|<code>[[#BTRFS_ORPHAN_ITEM_KEY|BTRFS_ORPHAN_ITEM_KEY]] [48]</code>
|objectid of the root to be removed
|}

*There is no item body associated with this key. All required information is contained within the key itself and the <code>[[#ROOT_ITEM|ROOT_ITEM]]</code> associated with the objectid contained in <code>offset</code>

When the file system is mounted again after failure, the <code>ROOT_TREE</code> is searched for all orphan keys and the process is resumed for each one using the <code>drop_progress</code> and <code>drop_level</code> fields in the <code>[[#ROOT_ITEM|ROOT_ITEM]]</code>.

=== <div id="EXTENT_TREE">EXTENT tree (2)</div> ===

TODO

* Holds EXTENT_ITEMs, BLOCK_GROUP_ITEMs
* Pointed to by ROOT

=== EMPTY_SUBVOL dir (2) ===

TODO

=== <div id="CHUNK_TREE">CHUNK_TREE (3)</div> ===

The chunk tree holds all [[#DEV ITEM .28d8.29|DEV_ITEMs]] and [[#CHUNK ITEM .28e4.29|CHUNK_ITEMs]], making it possible to determine the device(s) and physical address(es) corresponding to a given logical address. It is therefore crucial for access to the contents of the filesystem.

The chunk tree resides entirely in SYSTEM block groups, and will therefore be accessible from the [[#CHUNK ITEM|CHUNK_ITEM]] array in the [[#Superblock|Superblock]]. It also has an entry in the ROOT tree.

====Reserved objectids====
*<div id="BTRFS_FIRST_CHUNK_TREE_OBJECTID"><code>BTRFS_FIRST_CHUNK_TREE_OBJECTID = 256</code></div>
:This objectid indicates the first available objectid in this <code>CHUNK_TREE</code>. In practice, it is the <i>only</i> objectid used in the tree. The <code>offset</code> field of the key is the only component used to distinguish separate <code>[[#CHUNK_ITEM|CHUNK_ITEM]]</code> items.

=== <div if="DEV_TREE">Dev tree (4)</div> ===

The dev tree holds all [[#DEV EXTENT .28cc.29|DEV_EXTENTs]], making it possible to determine the logical address corresponding to a given physical address. This is necessary when shrinking or removing devices. The dev tree has an entry in the [[#Root tree .281.29|root tree]].

=== <div id="FS_TREE">FS_TREE (5)</div> ===

TODO

* Holds <code>[[Data_Structures#btrfs_inode_item|INODE_ITEM]]</code>s, <code>[[Data_Structures#btrfs_inode_ref|INODE_REF]]</code>s, <code>[[Data_Structures#btrfs_dir_item|DIR_ITEM]]</code>s, DIR_INDEXen, XATTR_ITEMs,  <code>[[Data_Structures#btrfs_file_extent_item|EXTENT_DATA]]</code>s for a filesystem
* Pointed to by ROOT
* TODO: ".."

=== Root tree directory ===

The root tree directory is stored in the [[#Root tree .281.29|root tree]]. It has an INODE_ITEM and a DIR_ITEM with name "default" pointing to the FS tree. There is also a corresponding INODE_REF, but no DIR_INDEX. The objectid of the root tree directory is stored in the [[#Superblock|superblock]], but is currently always 6.

=== Checksum tree (7) ===

The checksum tree contains all the EXTENT_CSUMs. It has an entry in the [[#Root tree .281.29|root tree]].

=== ORPHAN (-5) ===

TODO

=== TREE_LOG (-6) ===

TODO

=== TREE_LOG_FIXUP (-7) ===

TODO

=== TREE_RELOC (-8) ===

TODO

* Just a copy of another tree

=== DATA_RELOC tree (-9) ===

TODO

* Holds 100 INODE_ITEM 0
* Holds 100 INODE_REF 100 0:'..'
* Pointed to by ROOT

=== EXTENT_CSUM (-a) ===

TODO

=== MULTIPLE_OBJECTIDS (-100) ===

TODO

== Item Types ==

=== INODE_ITEM (01) ===

====Location====
<code>INODE_ITEM</code> items are located primarily in file trees but are also found in the [[On-disk_Format#ROOT_TREE|ROOT_TREE]] to implement the free space cache (v1).

====Usage====
{|class="wikitable"
!colspan="3"|struct btrfs_key
|-
!objectid
!type
!offset
|-
|objectid (Used as inode number)
|<code>BTRFS_INODE_ITEM_KEY [0x1]</code>
|0
|}

====Description====
Contains the stat information for an inode; see [http://linux.die.net/man/2/stat stat(2)].

====Item Contents====
<code>INODE_ITEM</code> items contain a single <code>[[Data_Structures#btrfs_inode_item|btrfs_inode_item]]</code> structure.

=== INODE_REF (0c) ===

(inode_id, directory_id) TODO

From an inode to a name in a directory.

{| class="wikitable" border="1"
|+
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 8
| UINT
| index in the directory
|-
| align="right" | 8
| align="right" | 2
| UINT
| (''n'')
|-
| align="right" | a
| align="right" | ''n''
| ASCII
| name in the directory
|-
| colspan="4" | a+''n''
|}

This structure can be repeated...?


=== INODE_EXTREF (0d) ===

(inode_id, hash of name [using directory object ID as seed]) TODO

From an inode to a name in a directory. Used if the regarding INODE_REF array ran out of space. ''This item requires the EXTENDED_IREF feature.''

{| class="wikitable" border="1"
|+
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 8
| UINT
| directory object ID
|-
| align="right" | 8
| align="right" | 8
| UINT
| index in the directory
|-
| align="right" | 10
| align="right" | 2
| UINT
| (''n'')
|-
| align="right" | 12
| align="right" | ''n''
| ASCII
| name in the directory
|-
| colspan="4" | 12+''n''
|}

This structure can be repeated...?

=== <div id="XATTR_ITEM">XATTR_ITEM (18)</div> ===

====Location====
<code>XATTR_ITEM</code> items are only located in file trees.

====Usage====

{|class="wikitable"
!colspan="3"|<code>struct btrfs_key</code>
|-
!objectid
!type
!offset
|-
|<code>objectid of owning inode</code>
|<code>BTRFS_XATTR_ITEM_KEY [24]</code>
|<code>hash of name</code>
|}

====Description====
<code>XATTR_ITEM</code> items contain extended attributes. Each name is hashed using the name hash and that value is used in the key for locating the entry quickly. Each <code>XATTR_ITEM</code> item contains one or more extended attributes with names represented by the same hash. All extended attributes that share the same name hash must fit in a single leaf.

====Item Contents====
<code>XATTR_ITEM</code> items consist of a series of one or more extended attribute entries with names that share a hash value.  Each entry consists of a <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item]]</code> structure immediately followed by the name and the attribute data.  The length of each name is contained in <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item.name_len]]</code>. The data payload begins immediately after the name. The data payload length is contained in <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item.data_len]]</code>. <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item.data_len.location]]</code> is unused and must be zeroed. <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item.type]]</code> contains a shorthand value referring to the type of item to which an entry refers it must always be be <code>BTRFS_FT_XATTR</code> when used to describe an extended attribute.

When there is more than one entry for a single hash value, the offset of each entry must be calculating using the lengths of the preceding entries including names and data. 

For more details, please see: <code>[[Data_Structures#btrfs_dir_item|struct btrfs_dir_item]]</code> and <code>[[#DIR_ITEM|DIR_ITEM]]</code>.

=== VERITY_DESC (24) ===

====Location====
<code>VERITY_DESC</code> items are located in the [[On-disk_Format#FS_TREE|FS_TREE]]. TODO

=== VERITY_MERKLE (25) ===

====Location====
<code>VERITY_MERKLE</code> items are located in the [[On-disk_Format#FS_TREE|FS_TREE]]. TODO

=== ORPHAN_ITEM (30) ===

(-5, objid of orphan inode) TODO

    Empty.

=== DIR_LOG_ITEM (3c) ===

(directory_id, first offset) TODO

    The log is considered authoritative for ([first offset, end offset)]
     0  8 UINT   end offset

=== DIR_LOG_INDEX (48) ===

(directory_id, first offset) TODO

    Same as DIR_LOG_ITEM.

=== <div id="DIR_ITEM">DIR_ITEM (54)</div> ===

====Location====
<code>DIR_ITEM</code> items are only located in file trees.

====Usage====

{|class="wikitable"
!colspan="3"|<code>struct btrfs_key</code>
|-
!objectid
!type
!offset
|-
|<code>objectid of owning inode</code>
|<code>BTRFS_DIR_ITEM_KEY [84]</code>
|<code>hash of name</code>
|}

====Description====
<code>DIR_ITEM</code> items contain directory entries. Each name is hashed using the name hash and that value is used in the key for locating the entry quickly. Each <code>DIR_ITEM</code> item contains one or more directory entries with names represented by the same hash. All directory entries that share the same name hash must fit in a single leaf.

====Item Contents====
<code>DIR_ITEM</code> items consist of a series of one or more directory entries with names that share a hash value.  Each entry consists of a <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item]]</code> structure immediately followed by the name.  The length of each name is contained in <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item.name_len]]</code>. The location of the item to which this entry refers is contained in <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item.location]]</code> and must refer to a valid item in the same file tree. <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item.type]]</code> contains a shorthand value referring to the type of item to which an entry refers. It will never be <code>BTRFS_FT_XATTR</code> when used in a standard directory. <code>[[Data_Structures#btrfs_dir_item|btrfs_dir_item.data_len]]</code> is unused and must be <code>0</code>

When there is more than one entry for a single hash value, the offset of each entry must be calculating using the lengths of the preceding entries including names. 

For more details, please see: <code>[[Data_Structures#btrfs_dir_item|struct btrfs_dir_item]]</code>.

=== DIR_INDEX (60) ===

(parent objectid, 60, index in parent)

Allows looking up an item in a directory by index. Indices start at 2 (because of "." and ".."); removed files can cause "holes" in the index space. DIR_INDEXen have the same contents as [[#DIR ITEM .2854.29|DIR_ITEMs]], but may contain only one entry.

=== EXTENT_DATA (6c) ===

(inode id, 6c, offset in file) TODO

The contents of a file.

{| class="wikitable" border="1"
|+
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 8
| UINT
| generation
|-
| align="right" | 8
| align="right" | 8
| UINT
| (''n'') size of decoded extent
|-
| align="right" | 10
| align="right" | 1
| UINT
| compression (0=none, 1=zlib, 2=LZO)
|-
| align="right" | 11
| align="right" | 1
| UINT
| encryption (0=none)
|-
| align="right" | 12
| align="right" | 2
| UINT
| other encoding (0=none)
|-
| align="right" | 14
| align="right" | 1
| UINT
| type (0=inline, 1=regular, 2=prealloc)
|-
| colspan="4" | 15
|}

If the extent is inline, the remaining item bytes are the data bytes (''n'' bytes in case no compression/encryption/other encoding is used).

Otherwise, the structure continues:

{| class="wikitable" border="1"
|+
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 15
| align="right" | 8
| UINT
| (''ea'') logical address of extent. If this is zero, the extent is sparse and consists of all zeroes.
|-
| align="right" | 1d
| align="right" | 8
| UINT
| (''es'') size of extent
|-
| align="right" | 25
| align="right" | 8
| UINT
| (''o'') offset within the extent
|-
| align="right" | 2d
| align="right" | 8
| UINT
| (''s'') logical number of bytes in file
|-
| colspan="4" | 35
|}

''ea'' and ''es'' must exactly match an EXTENT_ITEM. If the ''es'' bytes of data at logical address ''ea'' are decoded, ''n'' bytes will result. The file's data contains the ''s'' bytes at offset ''o'' within the decoded bytes. In the simplest, uncompressed case, ''o''=0 and ''n''=''es''=''s'', so the file's data simply contains the ''n'' bytes at logical address ''ea''.

=== EXTENT_CSUM (80) ===

(-a, logical address?) TODO

    Contains one or more checksums of the type in the superblock for adjacent
    blocks starting at logical address (blocksize).

=== <div id="ROOT_ITEM">ROOT_ITEM (84)</div> ===

====Location====

<code>ROOT_ITEM</code> items are only located in the [[#ROOT_TREE|ROOT_TREE]].

====Usage====
{|class="wikitable"
!colspan="3"|<code>struct btrfs_key</code>
|-
!objectid
!type
!offset
|-
|<code>objectid of root (TODO: document reserved objectids)</code>
|<code>BTRFS_ROOT_ITEM_KEY [132]</code>
|<code>0</code> for normal subvolume.
Otherwise, <code>transid</code> of the transaction that created the snapshot.
|}

====Description====

A fundamental component of btrfs is the btree. <code>ROOT_ITEM</code> items define the location and parameters of the root of a btree. 

====Item Contents====
<code>ROOT_ITEM</code> items contain a single <code>[[Data_Structures#btrfs_root_item|btrfs_root_item]]</code> structure.

=== ROOT_BACKREF (90) ===

(subtree id, 90, tree id) TODO

Same content as [[#ROOT REF .289c.29|ROOT_REF]].

=== ROOT_REF (9c) ===

====Location====
<code>ROOT_REF</code> items are only located in the <code>[[#ROOT_TREE|ROOT_TREE]]</code>.

(tree id, subtree id) TODO

     0  8 UINT   ID of directory in [tree id] that contains the subtree
     8  8 UINT   Sequence (index in tree) (even, starting at 2?)
    10  2 UINT   (n)
    12  n ASCII  name

=== <div id="EXTENT_ITEM">EXTENT_ITEM (a8)</div> ===

====Location====
<code>EXTENT_ITEM</code> items are only located in the <code>[[#EXTENT_TREE|EXTENT_TREE]]</code>.

====Usage====

{|class="wikitable"
!colspan="3"|<code>struct btrfs_key</code>
|-
!objectid
!type
!offset
|-
|<code>byte offset for start of extent</code>
|<code>BTRFS_EXTENT_ITEM_KEY [168]</code>
|<code>size of extent, in bytes</code>
|}

====Description====
<code>EXTENT_ITEM</code> items describe the space allocated for metadata tree nodes and leafs as well as data extents. The space is allocated from block groups that define the appropriate regions. In addition to functioning as basic allocation records, <code>EXTENT_ITEM</code> items also contain back references that can be used to repair the file system or resolve extent ownership back to a set of one or more file trees. Although <code>EXTENT_ITEM</code> items can be used to describe both <code>DATA</code> and <code>TREE_BLOCK</code> extents, newer file systems with the [[Feature:Skinny_Metadata|skinny metadata]] feature enabled at mkfs time use [[#METADATA_ITEM|METADATA_ITEM]] items to represent metadata instead.


====Item Contents====
<code>EXTENT_ITEM</code> items begin with the <code>[[Data_Structures#btrfs_extent_item|btrfs_extent_item]]</code> structure and are followed by records that are defined by the <code>flags</code> field in that structure.

=== <div id="METADATA_ITEM">METADATA_ITEM (a9)</div> ===

====Location====
<code>METADATA_ITEM</code> items are only located in the <code>[[#EXTENT_TREE|EXTENT_TREE]]</code>.

====Usage====

{|class="wikitable"
!colspan="3"|<code>struct btrfs_key</code>
|-
!objectid
!type
!offset
|-
|<code>byte offset for start of extent</code>
|<code>BTRFS_METADATA_ITEM_KEY [169]</code>
|<code>level of block in the metadata tree that contains it</code>
|}

====Description====
<code>METADATA_ITEM</code> items describe the space allocated for metadata tree nodes and leafs. The space is allocated from block groups that define metadata regions. In addition to functioning as basic allocation records, <code>METADATA_ITEM</code> items also contain back references that can be used to repair the file system or resolve extent ownership back to a set of one or more file trees.

====Item Contents====
<code>METADATA_ITEM</code> items begin with the <code>[[Data_Structures#btrfs_extent_item|btrfs_extent_item]]</code> structure and are followed by records that are defined by the <code>flags</code> field in that structure.

=== TREE_BLOCK_REF (b0) ===

(logical address, b0, root object id) TODO

     0   8 UINT   offset (the object ID of the tree)

=== EXTENT_DATA_REF (b2) ===

(logical address, b2, hash of first three fields) TODO

     0   8 UINT   root objectid (id of tree contained in)
     8   8 UINT   object id (owner)
    10   8 UINT   offset (in the file data)
    18   4 UINT   count (always 1?)

=== EXTENT_REF_V0 (b4) ===

TODO

=== SHARED_BLOCK_REF (b6) ===

(logical address, b6, parent) TODO

{| class="wikitable" border="1"
|+
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 8
| UINT
| offset
|-
| colspan="4" | 8
|}

=== SHARED_DATA_REF (b8) ===

(logical address, b8, parent) TODO

{| class="wikitable" border="1"
|+
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 8
| UINT
| offset
|-
| align="right" | 8
| align="right" | 4
| UINT
| count (always 1?)
|-
| colspan="4" | c
|}

=== BLOCK_GROUP_ITEM (c0) ===

====Location====

<code>BLOCK_GROUP_ITEM</code> items are only found in the <code>[[#EXTENT_TREE|EXTENT_TREE]]</code>.

====Usage====

{|class="wikitable"
!colspan="3"|<code>struct btrfs_key</code>
|-
!objectid
!type
!offset
|-
|Starting offset in the space defined by the <code>[[#EXTENT_TREE|EXTENT_TREE]]</code>.
|<code>BTRFS_BLOCK_GROUP_ITEM [192]</code>
|Size of the block group, in bytes
|}

====Description====

While the <code>[[#EXTENT_TREE|EXTENT_TREE]]</code> defines the address space used for extent allocations for the entire file system, block groups allocate and define the parameters within that space. Every <code>[[#EXTENT_ITEM|EXTENT_ITEM]]</code> or <code>[[#METADATA_ITEM|METADATA_ITEM]]</code> that describes an extent in use by the file system is apportioned from allocated block groups. Each block group can represent space used for <code>SYSTEM</code> objects (e.g. the <code>[[#CHUNK_TREE|CHUNK_TREE]]</code> and primary super block), <code>METADATA</code> trees and items, or <code>DATA</code> extents. It is possible to combine <code>METADATA</code> and <code>DATA</code> allocations within a single block group, though it is not recommended. This mixed allocation policy is typically only seen on file systems smaller than approximately 10 GiB in size.

====Item Contents====

<code>BTRFS_BLOCK_GROUP</code> items contain a single <code>[[Data_Structures#btrfs_block_group_item|struct btrfs_block_group_item]]</code>.

=== DEV_EXTENT (cc) ===

(device id, cc, physical address) TODO

Maps from physical address to logical.

{| class="wikitable" border="1"
|+
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 8
| UINT
| chunk tree (always 3)
|-
| align="right" | 8
| align="right" | 8
| OBJID
| chunk oid (always 256?)
|-
| align="right" | 10
| align="right" | 8
| UINT
| logical address
|-
| align="right" | 18
| align="right" | 8
| UINT
| size in bytes
|-
| align="right" | 20
| align="right" | 10
| UUID
| chunk tree UUID
|-
| colspan="4" | 30
|}

=== DEV_ITEM (d8) ===

(1, device id) TODO

Contains information about one device.

{| class="wikitable" border="1"
|+
|-
! Off
! Size
! Type
! Description
|-
| align="right" | 0
| align="right" | 8
| UINT
| device id
|-
| align="right" | 8
| align="right" | 8
| UINT
| number of bytes
|-
| align="right" | 10
| align="right" | 8
| UINT
| number of bytes used
|-
| align="right" | 18
| align="right" | 4
| UINT
| optimal I/O align
|-
| align="right" | 1c
| align="right" | 4
| UINT
| optimal I/O width
|-
| align="right" | 20
| align="right" | 4
| UINT
| minimal I/O size (sector size)
|-
| align="right" | 24
| align="right" | 8
| UINT
| type
|-
| align="right" | 2c
| align="right" | 8
| UINT
| generation
|-
| align="right" | 34
| align="right" | 8
| UINT
| start offset
|-
| align="right" | 3c
| align="right" | 4
| UINT
| dev group
|-
| align="right" | 40
| align="right" | 1
| UINT
| seek speed
|-
| align="right" | 41
| align="right" | 1
| UINT
| bandwidth
|-
| align="right" | 42
| align="right" | 10
| UUID
| device UUID
|-
| align="right" | 52
| align="right" | 10
| UUID
| FS UUID
|-
| colspan="4" | 62
|}

=== CHUNK_ITEM (e4) ===

(100, logical address) TODO

    Maps logical address to physical.
     0  8 UINT   size of chunk (bytes)
     8  8 OBJID  root referencing this chunk (2)
    10  8 UINT   stripe length
    18  8 UINT   type (same as flags for block group?)
    20  4 UINT   optimal io alignment
    24  4 UINT   optimal io width
    28  4 UINT   minimal io size (sector size)
    2c  2 UINT   number of stripes
    2e  2 UINT   sub stripes
    30
 
    Stripes follow (for each number of stripes):
     0  8 OBJID  device id
     8  8 UINT   offset
    10 10 UUID   device UUID
    20

=== STRING_ITEM (fd) ===

(anything, 0)

Contains a string; used for testing only.

(Page contents used to be on user page, moved to own during 2012 migration.)

[[Category:CodeDoc]]