----
'''NOTE:''' ''This article is a work in progress; [[Features&action=edit|comments]] welcome.''
----



Linux has a wealth of filesystems from which to choose, but we are facing a number of challenges with scaling to the large storage subsystems that are becoming common in today's data centers. Filesystems need to scale in their ability to address and manage large storage, and also in their ability to detect, repair and tolerate errors in the data stored on disk.

== Major Features Currently Implemented ==
* Extent based file storage
* 2^64 byte == 16 EiB maximum file size (practical limit is 8 EiB due to Linux VFS)
* Space-efficient packing of small files
* Space-efficient indexed directories
* Dynamic inode allocation
* Writable snapshots, read-only snapshots
* Subvolumes (separate internal filesystem roots)
* Checksums on data and metadata (crc32c)
* [[Compression]] (zlib and LZO)
* Integrated multiple device support
** File Striping
** File Mirroring
** File Striping+Mirroring
** Single and Dual Parity implementations
* SSD (flash storage) awareness (TRIM/Discard for reporting free blocks for reuse) and optimizations (e.g. avoiding unnecessary seek optimizations, sending writes in clusters, even if they are from unrelated files. This results in larger write operations and faster write throughput)
* Efficient [[incremental backup]]
* Background scrub process for finding and repairing errors of files with redundant copies
* Online filesystem defragmentation
* [[btrfsck|Offline filesystem check]]
* In-place [[Conversion_from_Ext3|conversion]] of existing ext3/4 file systems
* [[Seed-device|Seed devices]]. Create a (readonly) filesystem that acts as a template to seed other Btrfs filesystems. The original filesystem and devices are included as a readonly starting point for the new filesystem. Using copy on write, all modifications are stored on different devices; the original is unchanged.
* Subvolume-aware [[quota support]]
* Send/receive of subvolume changes
** Efficient incremental filesystem mirroring
* Batch, or out-of-band [[deduplication]] (happens after writes, not during)

== Features Currently in Development or Planned for Future Implementation ==

* Fast offline filesystem check
* Online filesystem check
* Object-level mirroring and striping
* Alternative checksum algorithms
* In-band [[deduplication]] (happens during writes)
* Other compression methods (snappy, [[Project_ideas#Compression_enhancements|LZ4]])
* Hot data tracking and moving to faster devices (currently being pushed as a generic feature available through VFS)