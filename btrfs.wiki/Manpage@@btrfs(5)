=btrfs-man5(5) manual page=
{{GeneratedManpage
|name=btrfs-man5}}

==NAME==
btrfs-man5 - topics about the BTRFS filesystem (mount options, supported file attributes and other)

==DESCRIPTION==

<p>This document describes topics related to BTRFS that are not specific to the
tools.  Currently covers:</p>
<ol>
<li>
<p>
mount options
</p>
</li>
<li>
<p>
filesystem features
</p>
</li>
<li>
<p>
file attributes
</p>
</li>
<li>
<p>
control device
</p>
</li>
</ol>
==MOUNT OPTIONS==

<p>This section describes mount options specific to BTRFS.  For the generic mount
options please refer to [http://man7.org/linux/man-pages/man8/mount.8.html mount(8)] manpage. The options are sorted alphabetically
(discarding the <em>no</em> prefix).</p>
<dl>
<dt>
<b>acl</b>
<dt>
<b>noacl</b>
<dd>
<p>
(default: on)
</p>
<p>Enable/disable support for Posix Access Control Lists (ACLs).  See the
[http://man7.org/linux/man-pages/man5/acl.5.html acl(5)] manual page for more information about ACLs.</p>
<p>The support for ACL is build-time configurable (BTRFS_FS_POSIX_ACL) and
mount fails if <em>acl</em> is requested but the feature is not compiled in.</p>

<dt>
<b>autodefrag</b>
<dt>
<b>noautodefrag</b>
<dd>
<p>
(since: 3.0, default: off)
</p>
<p>Enable automatic file defragmentation.
When enabled, small random writes into files (in a range of tens of kilobytes,
currently it&#8217;s 64K) are detected and queued up for the defragmentation process.
Not well suited for large database workloads.</p>
<p>The read latency may increase due to reading the adjacent blocks that make up the
range for defragmentation, successive write will merge the blocks in the new
location.</p>
<blockquote><b>Warning:</b>
Defragmenting with Linux kernel versions &lt; 3.9 or ≥ 3.14-rc2 as
well as with Linux stable kernel versions ≥ 3.10.31, ≥ 3.12.12 or
≥ 3.13.4 will break up the ref-links of CoW data (for example files
copied with <tt>cp --reflink</tt>, snapshots or de-duplicated data).
This may cause considerable increase of space usage depending on the
broken up ref-links.</blockquote>

<dt>
<b>barrier</b>
<dt>
<b>nobarrier</b>
<dd>
<p>
(default: on)
</p>
<p>Ensure that all IO write operations make it through the device cache and are stored
permanently when the filesystem is at it&#8217;s consistency checkpoint. This
typically means that a flush command is sent to the device that will
synchronize all pending data and ordinary metadata blocks, then writes the
superblock and issues another flush.</p>
<p>The write flushes incur a slight hit and also prevent the IO block
scheduler to reorder requests in a more effective way. Disabling barriers gets
rid of that penalty but will most certainly lead to a corrupted filesystem in
case of a crash or power loss. The ordinary metadata blocks could be yet
unwritten at the time the new superblock is stored permanently, expecting that
the block pointers to metadata were stored permanently before.</p>
<p>On a device with a volatile battery-backed write-back cache, the <em>nobarrier</em>
option will not lead to filesystem corruption as the pending blocks are
supposed to make it to the permanent storage.</p>

<dt>
<b>check_int</b>
<dt>
<b>check_int_data</b>
<dt>
<b>check_int_print_mask=<em>value</em></b>
<dd>
<p>
(since: 3.0, default: off)
</p>
<p>These debugging options control the behavior of the integrity checking
module (the BTRFS_FS_CHECK_INTEGRITY config option required).<br/></p>
<p><tt>check_int</tt> enables the integrity checker module, which examines all
block write requests to ensure on-disk consistency, at a large
memory and CPU cost.<br/></p>
<p><tt>check_int_data</tt> includes extent data in the integrity checks, and
implies the check_int option.<br/></p>
<p><tt>check_int_print_mask</tt> takes a bitmask of BTRFSIC_PRINT_MASK_* values
as defined in <em>fs/btrfs/check-integrity.c</em>, to control the integrity
checker module behavior.<br/></p>
<p>See comments at the top of <em>fs/btrfs/check-integrity.c</em>
for more info.</p>

<dt>
<b>clear_cache</b>
<dd>
<p>
Force clearing and rebuilding of the disk space cache if something
has gone wrong. See also: <em>space_cache</em>.
</p>

<dt>
<b>commit=<em>seconds</em></b>
<dd>
<p>
(since: 3.12, default: 30)
</p>
<p>Set the interval of periodic commit. Higher
values defer data being synced to permanent storage with obvious
consequences when the system crashes. The upper bound is not forced,
but a warning is printed if it&#8217;s more than 300 seconds (5 minutes).</p>

<dt>
<b>compress</b>
<dt>
<b>compress=<em>type</em></b>
<dt>
<b>compress-force</b>
<dt>
<b>compress-force=<em>type</em></b>
<dd>
<p>
(default: off)
</p>
<p>Control BTRFS file data compression.  Type may be specified as <em>zlib</em>,
<em>lzo</em>, <em>zstd</em> or <em>no</em> (for no compression, used for remounting).  If no type
is specified, <em>zlib</em> is used.  If <em>compress-force</em> is specified,
the compression will allways be attempted, but the data may end up uncompressed
if the compression would make them larger.</p>
<p>Otherwise some simple heuristics are applied to detect an incompressible file.
If the first blocks written to a file are not compressible, the whole file is
permanently marked to skip compression. As this is too simple, the
<em>compress-force</em> is a workaround that will compress most of the files at the
cost of some wasted CPU cycles on failed attempts. The heuristics of <em>compress</em>
will improve in the future so this will not be necessary.</p>
<blockquote><b>Note:</b>
If compression is enabled, <em>nodatacow</em> and <em>nodatasum</em> are disabled.</blockquote>

<dt>
<b>datacow</b>
<dt>
<b>nodatacow</b>
<dd>
<p>
(default: on)
</p>
<p>Enable data copy-on-write for newly created files.
<em>Nodatacow</em> implies <em>nodatasum</em>, and disables <em>compression</em>. All files created
under <em>nodatacow</em> are also set the NOCOW file attribute (see [http://man7.org/linux/man-pages/man1/chattr.1.html chattr(1)]).</p>
<blockquote><b>Note:</b>
If <em>nodatacow</em> or <em>nodatasum</em> are enabled, compression is disabled.</blockquote>

<dt>
<b>datasum</b>
<dt>
<b>nodatasum</b>
<dd>
<p>
(default: on)
</p>
<p>Enable data checksumming for newly created files.
<em>Datasum</em> implies <em>datacow</em>, ie. the normal mode of operation. All files created
under <em>nodatasum</em> inherit the "no checksums" property, however there&#8217;s no
corresponding file attribute (see [http://man7.org/linux/man-pages/man1/chattr.1.html chattr(1)]).</p>
<blockquote><b>Note:</b>
If <em>nodatacow</em> or <em>nodatasum</em> are enabled, compression is disabled.</blockquote>

<dt>
<b>degraded</b>
<dd>
<p>
(default: off)
</p>
<p>Allow mounts with less devices than the raid profile constraints
require.  A read-write mount (or remount) may fail with too many devices
missing, for example if a stripe member is completely missing from RAID0.</p>

<dt>
<b>device=<em>devicepath</em></b>
<dd>
<p>
Specify a path to a device that will be scanned for BTRFS filesystem during
mount. This is usually done automatically by a device manager (like udev) or
using the <b>btrfs device scan</b> command (eg. run from the initial ramdisk). In
cases where this is not possible the <em>device</em> mount option can help.
</p>
<blockquote><b>Note:</b>
booting eg. a RAID1 system may fail even if all filesystem&#8217;s <em>device</em>
paths are provided as the actual device nodes may not be discovered by the
system at that point.</blockquote>

<dt>
<b>discard</b>
<dt>
<b>nodiscard</b>
<dd>
<p>
(default: off)
</p>
<p>Enable discarding of freed file blocks using TRIM operation.  This is useful
for SSD devices, thinly provisioned LUNs or virtual machine images where the
backing device understands the operation. Depending on support of the
underlying device, the operation may severely hurt performance in case the TRIM
operation is synchronous (eg. with SATA devices up to revision 3.0).</p>
<p>If discarding is not necessary to be done at the block freeing time, there&#8217;s
<tt>fstrim</tt> tool that lets the filesystem discard all free blocks in a batch,
possibly not much interfering with other operations. Also, the the device may
ignore the TRIM command if the range is too small, so running the batch discard
can actually discard the blocks.</p>

<dt>
<b>enospc_debug</b>
<dt>
<b>noenospc_debug</b>
<dd>
<p>
(default: off)
</p>
<p>Enable verbose output for some ENOSPC conditions. It&#8217;s safe to use but can
be noisy if the system reaches near-full state.</p>

<dt>
<b>fatal_errors=<em>action</em></b>
<dd>
<p>
(since: 3.4, default: bug)
</p>
<p>Action to take when encountering a fatal error.</p>
<dl>
<dt>
<b>bug</b>
<dd>
<p>
<em>BUG()</em> on a fatal error, the system will stay in the crashed state and may be
still partially usable, but reboot is required for full operation
</p>

<dt>
<b>panic</b>
<dd>
<p>
<em>panic()</em> on a fatal error, depending on other system configuration, this may
be followed by a reboot. Please refer to the documentation of kernel boot
parameters, eg. <em>panic</em>, <em>oops</em> or <em>crashkernel</em>.
</p>

</dl>

<dt>
<b>flushoncommit</b>
<dt>
<b>noflushoncommit</b>
<dd>
<p>
(default: off)
</p>
<p>This option forces any data dirtied by a write in a prior transaction to commit
as part of the current commit, effectively a full filesystem sync.</p>
<p>This makes the committed state a fully consistent view of the file system from
the application&#8217;s perspective (i.e., it includes all completed file system
operations). This was previously the behavior only when a snapshot was
created.</p>
<p>When off, the filesystem is consistent but buffered writes may last more than
one transaction commit.</p>

<dt>
<b>fragment=<em>type</em></b>
<dd>
<p>
(depends on compile-time option BTRFS_DEBUG, since: 4.4, default: off)
</p>
<p>A debugging helper to intentionally fragment given <em>type</em> of block groups. The
type can be <em>data</em>, <em>metadata</em> or <em>all</em>. This mount option should not be used
outside of debugging environments and is not recognized if the kernel config
option <em>BTRFS_DEBUG</em> is not enabled.</p>

<dt>
<b>inode_cache</b>
<dt>
<b>noinode_cache</b>
<dd>
<p>
(since: 3.0, default: off)
</p>
<p>Enable free inode number caching. Not recommended to use unless files on your
filesystem get assigned inode numbers that are approaching 2<sup>64</sup>. Normally, new
files in each subvolume get assigned incrementally (plus one from the last
time) and are not reused. The mount option turns on caching of the existing
inode numbers and reuse of inode numbers of deleted files.</p>
<p>This option may slow down your system at first run, or after mounting without
the option.</p>
<blockquote><b>Note:</b>
Defaults to off due to a potential overflow problem when the free space
checksums don&#8217;t fit inside a single page.</blockquote>

<dt>
<b>logreplay</b>
<dt>
<b>nologreplay</b>
<dd>
<p>
(default: on, even read-only)
</p>
<p>Enable/disable log replay at mount time. See also <em>treelog</em>.</p>
<blockquote><b>Warning:</b>
currently, the tree log is replayed even with a read-only mount! To
disable that behaviour, mount also with <em>nologreplay</em>.</blockquote>

<dt>
<b>max_inline=<em>bytes</em></b>
<dd>
<p>
(default: min(2048, page size) )
</p>
<p>Specify the maximum amount of space, in bytes, that can be inlined in
a metadata B-tree leaf.  The value is specified in bytes, optionally
with a K suffix (case insensitive).  In practice, this value
is limited by the filesystem block size (named <em>sectorsize</em> at mkfs time),
and memory page size of the system. In case of sectorsize limit, there&#8217;s
some space unavailable due to leaf headers.  For example, a 4k sectorsize,
maximum size of inline data is about 3900 bytes.</p>
<p>Inlining can be completely turned off by specifying 0. This will increase data
block slack if file sizes are much smaller than block size but will reduce
metadata consumption in return.</p>
<blockquote><b>Note:</b>
the default value has changed to 2048 in kernel 4.6.</blockquote>

<dt>
<b>metadata_ratio=<em>value</em></b>
<dd>
<p>
(default: 0, internal logic)
</p>
<p>Specifies that 1 metadata chunk should be allocated after every <em>value</em> data
chunks. Default behaviour depends on internal logic, some percent of unused
metadata space is attempted to be maintained but is not always possible if
there&#8217;s not enough space left for chunk allocation. The option could be useful to
override the internal logic in favor of the metadata allocation if the expected
workload is supposed to be metadata intense (snapshots, reflinks, xattrs,
inlined files).</p>

<dt>
<b>norecovery</b>
<dd>
<p>
(since: 4.5, default: off)
</p>
<p>Do not attempt any data recovery at mount time. This will disable <em>logreplay</em>
and avoids other write operations.</p>
<blockquote><b>Note:</b>
The opposite option <em>recovery</em> used to have different meaning but was
changed for consistency with other filesystems, where <em>norecovery</em> is used for
skipping log replay. BTRFS does the same and in general will try to avoid any
write operations.</blockquote>

<dt>
<b>rescan_uuid_tree</b>
<dd>
<p>
(since: 3.12, default: off)
</p>
<p>Force check and rebuild procedure of the UUID tree. This should not
normally be needed.</p>

<dt>
<b>skip_balance</b>
<dd>
<p>
(since: 3.3, default: off)
</p>
<p>Skip automatic resume of an interrupted balance operation. The operation can
later be resumed with <b>btrfs balance resume</b>, or the paused state can be
removed with <b>btrfs balance cancel</b>. The default behaviour is to resume an
interrupted balance immediately after a volume is mounted.</p>

<dt>
<b>space_cache</b>
<dt>
<b>space_cache=<em>version</em></b>
<dt>
<b>nospace_cache</b>
<dd>
<p>
(<em>nospace_cache</em> since: 3.2, <em>space_cache=v1</em> and <em>space_cache=v2</em> since 4.5, default: <em>space_cache=v1</em>)
</p>
<p>Options to control the free space cache. The free space cache greatly improves
performance when reading block group free space into memory. However, managing
the space cache consumes some resources, including a small amount of disk
space.</p>
<p>There are two implementations of the free space cache. The original
implementation, <em>v1</em>, is the safe default. The <em>v1</em> space cache can be disabled
at mount time with <em>nospace_cache</em> without clearing.</p>
<p>On very large filesystems (many terabytes) and certain workloads, the
performance of the <em>v1</em> space cache may degrade drastically. The <em>v2</em>
implementation, which adds a new B-tree called the free space tree, addresses
this issue. Once enabled, the <em>v2</em> space cache will always be used and cannot
be disabled unless it is cleared. Use <em>clear_cache,space_cache=v1</em> or
<em>clear_cache,nospace_cache</em> to do so. If <em>v2</em> is enabled, kernels without <em>v2</em>
support will only be able to mount the filesystem in read-only mode. The
<tt>btrfs(8)</tt> command currently only has read-only support for <em>v2</em>. A read-write
command may be run on a <em>v2</em> filesystem by clearing the cache, running the
command, and then remounting with <em>space_cache=v2</em>.</p>
<p>If a version is not explicitly specified, the default implementation will be
chosen, which is <em>v1</em> as of 4.9.</p>

<dt>
<b>ssd</b>
<dt>
<b>ssd_spread</b>
<dt>
<b>nossd</b>
<dd>
<p>
(default: SSD autodetected)
</p>
<p>Options to control SSD allocation schemes.  By default, BTRFS will
enable or disable SSD allocation heuristics depending on whether a
rotational or non-rotational device is in use (contents of
<em>/sys/block/DEV/queue/rotational</em>). If it is, the <em>ssd</em> option is turned on.
The option <em>nossd</em> will disable the autodetection.</p>
<p>The <em>ssd_spread</em> mount option attempts to allocate into bigger and aligned
chunks of unused space, and may perform better on low-end SSDs.  <em>ssd_spread</em>
implies <em>ssd</em>, enabling all other SSD heuristics as well. The option <em>nossd</em>
will disable all SSD options.</p>

<dt>
<b>subvol=<em>path</em></b>
<dd>
<p>
Mount subvolume from <em>path</em> rather than the toplevel subvolume. The
<em>path</em> is absolute (ie. starts at the toplevel subvolume).
This mount option overrides the default subvolume set for the given filesystem.
</p>

<dt>
<b>subvolid=<em>subvolid</em></b>
<dd>
<p>
Mount subvolume specified by a <em>subvolid</em> number rather than the toplevel
subvolume.  You can use <b>btrfs subvolume list</b> to see subvolume ID numbers.
This mount option overrides the default subvolume set for the given filesystem.
</p>
<blockquote><b>Note:</b>
if both <em>subvolid</em> and <em>subvol</em> are specified, they must point at the
same subvolume, otherwise mount will fail.</blockquote>

<dt>
<b>thread_pool=<em>number</em></b>
<dd>
<p>
(default: min(NRCPUS + 2, 8) )
</p>
<p>The number of worker threads to allocate. NRCPUS is number of on-line CPUs
detected at the time of mount. Small number leads to less parallelism in
processing data and metadata, higher numbers could lead to a performance hit
due to increased locking contention, cache-line bouncing or costly data
transfers between local CPU memories.</p>

<dt>
<b>treelog</b>
<dt>
<b>notreelog</b>
<dd>
<p>
(default: on)
</p>
<p>Enable the tree logging used for <em>fsync</em> and <em>O_SYNC</em> writes. The tree log
stores changes without the need of a full filesystem sync. The log operations
are flushed at sync and transaction commit. If the system crashes between two
such syncs, the pending tree log operations are replayed during mount.</p>
<blockquote><b>Warning:</b>
currently, the tree log is replayed even with a read-only mount! To
disable that behaviour, mount also with <em>nologreplay</em>.</blockquote>
<p>The tree log could contain new files/directories, these would not exist on
a mounted filesystem if the log is not replayed.</p>

<dt>
<b>usebackuproot</b>
<dt>
<b>nousebackuproot</b>
<dd>
<p>Enable autorecovery attempts if a bad tree root is found at mount time.
Currently this scans a backup list of several previous tree roots and tries to
use the first readable. This can be used with read-only mounts as well.</p>
<blockquote><b>Note:</b>
This option has replaced <em>recovery</em>.</blockquote>

<dt>
<b>user_subvol_rm_allowed</b>
<dd>
<p>
(default: off)
</p>
<p>Allow subvolumes to be deleted by their respective owner. Otherwise, only the
root user can do that.</p>

</dl>
===DEPRECATED MOUNT OPTIONS===

<p>List of mount options that have been removed, kept for backward compatibility.</p>
<dl>
<dt>
<b>alloc_start=<em>bytes</em></b>
<dd>
<p>
(default: 1M, minimum: 1M, deprecated since: 4.13)
</p>
<p>Debugging option to force all block allocations above a certain
byte threshold on each block device.  The value is specified in
bytes, optionally with a K, M, or G suffix (case insensitive).</p>

<dt>
<b>recovery</b>
<dd>
<p>
(since: 3.2, default: off, deprecated since: 4.5)
</p>
<blockquote><b>Note:</b>
this option has been replaced by <em>usebackuproot</em> and should not be used
but will work on 4.5+ kernels.</blockquote>

<dt>
<b>subvolrootid=<em>objectid</em></b>
<dd>
<p>
(irrelevant since: 3.2, formally deprecated since: 3.10)
</p>
<p>A workaround option from times (pre 3.2) when it was not possible to mount a
subvolume that did not reside directly under the toplevel subvolume.</p>

</dl>
==FILESYSTEM FEATURES==

<p>The basic set of filesystem features gets extended over time. The backward
compatibility is maintained and the features are optional, need to be
explicitly asked for so accidental use will not create incompatibilities.</p>
<p>There are several classes and the respective tools to manage the features:</p>
<dl>
<dt>
at mkfs time only
<dd>
<p>
This is namely for core structures, like the b-tree nodesize, see
[[Manpage/mkfs.btrfs|mkfs.btrfs(8)]] for more details.
</p>

<dt>
after mkfs, on an unmounted filesystem
<dd>
<p>
Features that may optimize internal structures or add new structures to support
new functionality, see [[Manpage/btrfstune|btrfstune(8)]]. The command <b>btrfs inspect-internal
dump-super device</b> will dump a superblock, you can map the value of
<em>incompat_flags</em> to the features listed below
</p>

<dt>
after mkfs, on a mounted filesystem
<dd>
<p>
The features of a filesystem (with a given UUID) are listed in
<tt>/sys/fs/btrfs/UUID/features/</tt>, one file per feature. The status is stored
inside the file. The value <em>1</em> is for enabled and active, while <em>0</em> means the
feature was enabled at mount time but turned off afterwards.
</p>
<p>Whether a particular feature can be turned on a mounted filesystem can be found
in the directory <tt>/sys/fs/btrfs/features/</tt>, one file per feature. The value <em>1</em>
means the feature can be enabled.</p>

</dl>
<p>List of features (see also [[Manpage/mkfs.btrfs|mkfs.btrfs(8)]] section <em>FILESYSTEM FEATURES</em>):</p>
<dl>
<dt>
<b>big_metadata</b>
<dd>
<p>
(since: 3.4)
</p>
<p>the filesystem uses <em>nodesize</em> for metadata blocks, this can be bigger than the
page size</p>

<dt>
<b>compress_lzo</b>
<dd>
<p>
(since: 2.6.38)
</p>
<p>the <em>lzo</em> compression has been used on the filesystem, either as a mount option
or via <b>btrfs filesystem defrag</b>.</p>

<dt>
<b>compress_zstd</b>
<dd>
<p>
(since: 4.14)
</p>
<p>the <em>zstd</em> compression has been used on the filesystem, either as a mount option
or via <b>btrfs filesystem defrag</b>.</p>

<dt>
<b>default_subvol</b>
<dd>
<p>
(since: 2.6.34)
</p>
<p>the default subvolume has been set on the filesystem</p>

<dt>
<b>extended_iref</b>
<dd>
<p>
(since: 3.7)
</p>
<p>increased hardlink limit per file in a directory to 65536, older kernels
supported a varying number of hardlinks depending on the sum of all file name
sizes that can be stored into one metadata block</p>

<dt>
<b>mixed_backref</b>
<dd>
<p>
(since: 2.6.31)
</p>
<p>the last major disk format change, improved backreferences, now default</p>

<dt>
<b>mixed_groups</b>
<dd>
<p>
(since: 2.6.37)
</p>
<p>mixed data and metadata block groups, ie. the data and metadata are not
separated and occupy the same block groups, this mode is suitable for small
volumes as there are no constraints how the remaining space should be used
(compared to the split mode, where empty metadata space cannot be used for data
and vice versa)</p>
<p>on the other hand, the final layout is quite unpredictable and possibly highly
fragmented, which means worse performance</p>

<dt>
<b>no_holes</b>
<dd>
<p>
(since: 3.14)
</p>
<p>improved representation of file extents where holes are not explicitly
stored as an extent, saves a few percent of metadata if sparse files are used</p>

<dt>
<b>raid56</b>
<dd>
<p>
(since: 3.9)
</p>
<p>the filesystem contains or contained a raid56 profile of block groups</p>

<dt>
<b>skinny_metadata</b>
<dd>
<p>
(since: 3.10)
</p>
<p>reduced-size metadata for extent references, saves a few percent of metadata</p>

</dl>
==FILE ATTRIBUTES==

<p>The btrfs filesystem supports setting the following file attributes using the
[http://man7.org/linux/man-pages/man1/chattr.1.html chattr(1)] utility:</p>
<dl>
<dt>
<b>a</b>
<dd>
<p>
<em>append only</em>, new writes are always written at the end of the file
</p>

<dt>
<b>A</b>
<dd>
<p>
<em>no atime updates</em>
</p>

<dt>
<b>c</b>
<dd>
<p>
<em>compress data</em>, all data written after this attribute is set will be compressed.
Please note that compression is also affected by the mount options or the parent
directory attributes.
</p>
<p>When set on a directory, all newly created files will inherit this attribute.</p>

<dt>
<b>C</b>
<dd>
<p>
<em>no copy-on-write</em>, file modifications are done in-place
</p>
<p>When set on a directory, all newly created files will inherit this attribute.</p>
<blockquote><b>Note:</b>
due to implementation limitations, this flag can be set/unset only on
empty files.</blockquote>

<dt>
<b>d</b>
<dd>
<p>
<em>no dump</em>, makes sense with 3rd party tools like [http://man7.org/linux/man-pages/man8/dump.8.html dump(8)], on BTRFS the
attribute can be set/unset but no other special handling is done
</p>

<dt>
<b>D</b>
<dd>
<p>
<em>synchronous directory updates</em>, for more details search [http://man7.org/linux/man-pages/man2/open.2.html open(2)] for <em>O_SYNC</em>
and <em>O_DSYNC</em>
</p>

<dt>
<b>i</b>
<dd>
<p>
<em>immutable</em>, no file data and metadata changes allowed even to the root user as
long as this attribute is set (obviously the exception is unsetting the attribute)
</p>

<dt>
<b>S</b>
<dd>
<p>
<em>synchronous updates</em>, for more details search [http://man7.org/linux/man-pages/man2/open.2.html open(2)] for <em>O_SYNC</em> and
<em>O_DSYNC</em>
</p>

<dt>
<b>X</b>
<dd>
<p>
<em>no compression</em>, permanently turn off compression on the given file, other
compression mount options will not affect that
</p>
<p>When set on a directory, all newly created files will inherit this attribute.</p>

</dl>
<p>No other attributes are supported.  For the complete list please refer to the
[http://man7.org/linux/man-pages/man1/chattr.1.html chattr(1)] manual page.</p>
==CONTROL DEVICE==

<p>There&#8217;s a character special device <tt>/dev/btrfs-control</tt> with major and minor
numbers 10 and 234 (the device can be found under the <em>misc</em> category).</p>
<pre>$ ls -l /dev/btrfs-control
crw------- 1 root root 10, 234 Jan  1 12:00 /dev/btrfs-control</pre>
<p>The device accepts some ioctl calls that can perform following actions on the
filesystem module:</p>
<ul>
<li>
<p>
scan devices for btrfs filesystem (ie. to let multi-device filesystems mount
  automatically) and register them with the kernel module
</p>
</li>
<li>
<p>
similar to scan, but also wait until the device scanning process is finished
  for a given filesystem
</p>
</li>
<li>
<p>
get the supported features (can be also found under <em>/sys/fs/btrfs/features</em>)
</p>
</li>
</ul>
<p>The device is usually created by a system device node manager (eg. udev), but
can be created manually:</p>
<pre># mknod --mode=600 c 10 234 /dev/btrfs-control</pre>
<p>The control device is not strictly required but the device scanning will not
work and a workaround would need to be used to mount a multi-device filesystem.
The mount option <em>device</em> can trigger the device scanning during mount.</p>
==SEE ALSO==

<p>[http://man7.org/linux/man-pages/man5/acl.5.html acl(5)],
[[Manpage/btrfs|btrfs(8)]],
[http://man7.org/linux/man-pages/man1/chattr.1.html chattr(1)],
[http://man7.org/linux/man-pages/man8/fstrim.8.html fstrim(8)],
[http://man7.org/linux/man-pages/man2/ioctl.2.html ioctl(2)],
[[Manpage/mkfs.btrfs|mkfs.btrfs(8)]],
[http://man7.org/linux/man-pages/man8/mount.8.html mount(8)]</p>
[[Category:Manpage]]