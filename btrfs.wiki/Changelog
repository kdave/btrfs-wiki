= By feature =

Major features or significant feature enhancements by kernel version. For more information look below.

{| class="wikitable" border=1
|-
! Feature !! Version !! Description !! Notes
{{FeatureMerged
|name=scrub
|version=3.0
|text=Read all data and verify checksums, repair if possible.
}}
{{FeatureMerged
|name=auto raid repair
|version=3.2
|text=Automatic repair of broken data from a good copy
}}
{{FeatureMerged
|name=root backups
|version=3.2
|text=Save a few previous versions of the most imporant tree roots at commit time, used by ''-o recovery''
}}
{{FeatureMerged
|name=integrity checker
|version=3.3
|text=Optional infrastructure to verify integrity of written metadata blocks
}}
{{FeatureMerged
|name=backref walking
|version=3.3
|text=Groundwork to allow tracking owner of blocks, used via ''inspect-internal''
}}
{{FeatureMerged
|name=restriper
|version=3.3
|text=RAID profiles can be changed on-line, balance filters
}}
{{FeatureMerged
|name=big metadata blocks
|version=3.4
|text=Support for metadata blocks larger than page size
|note=Default nodesize is 16k since btrfs-progs 3.12
}}
{{FeatureMerged
|name=error handling
|version=3.4
|text=Generic infrastructure for graceful error handling (EIO)
}}
{{FeatureMerged
|name=device statistics
|version=3.5
|text=Persistent statistics about device errors
}}
{{FeatureMerged
|name=fsync speedup
|version=3.5
|text=Noticeable improvements in fsync() implementation
}}
{{FeatureMerged
|name=qgroups
|version=3.6
|text=Subvolume-aware quotas
}}
{{FeatureMerged
|name=send/receive
|version=3.6
|text=Ability to transfer one filesystem via a data stream (full or incremental) and apply the changes on a remote filesystem.
}}
{{FeatureMerged
|name=extrefs
|version=3.7
|text=Hardlink count limit is lifted to 64k
|note=Default since btrfs-progs 3.12
}}
{{FeatureMerged
|name=hole puching
|version=3.7
|text=Implement the FALLOC_FL_PUNCH_HOLE mode of ''fallocate''
}}
{{FeatureMerged
|name=device replace
|version=3.8
|text=Efficient replacement of existing device (add/remove in one go)
}}
{{FeatureMerged
|name=raid 5/6 ''(incomplete)''
|version=3.9
|text=Basic support for RAD5/6 profiles, no crash resiliency, replace and scrub support
}}
{{FeatureMerged
|name=snapshot-aware defrag
|version=3.9
|text=Defrag does not break links between shared extents (snapshots, reflinked files)
|note=Disabled since 3.14 (and backported to some stable kernel versions) due to problems. Will be enabled in the future.
}}
{{FeatureMerged
|name=lightweight send
|version=3.9
|text=A mode of ''send'' that does not add the actual file data to the stream
}}
{{FeatureMerged
|name=on-line label set/get
|version=3.9
|text=Label editable on mounted filesystems
}}
{{FeatureMerged
|name=skinny metadata
|version=3.10
|text=Reduced metadata size (format change) of extents
|note=Default since btrfs-progs 3.18
}}
{{FeatureMerged
|name=qgroup rescan
|version=3.10
|text=Sync qgroups with existing filesystem data
}}
{{FeatureMerged
|name=uuid tree
|version=3.12
|text=A map of subvolume/UUID that vastly speeds up send/receive
}}
{{FeatureMerged
|name=out-of-bound dedup
|version=3.12
|text=Support for deduplicating extents on a given set of files.
}}
{{FeatureMerged
|name=no-holes
|version=3.14
|text=No extent representation for file holes (format change), may reduce overall metadata consumption
}}
{{FeatureMerged
|name=feature bits in sysfs
|version=3.14
|text=/sys/fs/btrfs exports various bits about filesystem capabilities and feature support
}}
{{FeatureMerged
|name=O_TMPFILE
|version=3.16
|text=Mode of open() to safely create a temporary file
}}
{{FeatureMerged
|name=search ioctl v2
|version=3.16
|text=The extended SEARCH_TREE ioctl able to get more than a 4k data
}}
{{FeatureMerged
|name=auto blockgroup reclaim
|version=3.18
|text=Automatically remove blockgroups (aka. chunks) that become completely empty. 
}}
{{FeatureMerged
|name=raid56: scrub, replace
|version=3.19
|text=Scrub and device replace works on RAID56 filesystems.
}}
{{FeatureMerged
|name=store otime
|version=4.0
|text=Save creation time (otime) for all new files and directories. For future use, current tool cannot read it directly.
}}
{{FeatureMerged
|name=rootid ioctl accessible
|version=4.2
|text=The INO_LOOKUP will return root id (id of the containing subvolume), unrestricted and to all users if the ''treeid'' is 0.
}}
{{FeatureMerged
|name=dedupe possible on the same inode
|version=4.2
|text=The EXTENT_SAME ioctl will accept the same inode as source and destination (ranges must not overlap).
}}
{{FeatureMerged
|name=trim all free space
|version=4.3
|text=Trim will be performed also on the space that's not allocated by the chunks, not only free space within the allocated chunks.
}}
{{FeatureMerged
|name=balance filter updates
|version=4.4
|text=Enhanced syntax and new balance filters:
* limit=min..max
* usage=min..max
* stripes=min..max
}}
{{FeatureMerged
|name=free space tree
|version=4.5
|text=Improved implementation of free space cache, using b-trees.
}}
{{FeatureMerged
|name=balance filter updates
|version=4.5
|text=Conversion to data/DUP profile possible through balance filters -- on single-device filesytem.
|note=mkfs.btrfs allows creating DUP on single device in the non-mixed mode since 4.4
}}
{{FeatureMerged
|name=max_inline default
|version=4.6
|text=The default value of max_inline changed to 2048.
}}
{{FeatureMerged
|name=read features from control device
|version=4.6
|text=The existing ioctl GET_SUPPORTED_FEATURES can be now used on the control device (/dev/btrfs-control) and returns the supported features without any mounted filesystem.
}}
{{FeatureMerged
|name=delete device by id
|version=4.7
|text=Add new ioctl RM_DEV_V2, pass device to be deleted by its ID.
}}
{{FeatureMerged
|name=more renameat2 modes
|version=4.7
|text=Add support for RENAME_EXCHANGE and RENAME_WHITEOUT to ''renameat2'' syscall. This also means that ''overlayfs'' is now supported on top of btrfs.
}}
{{FeatureMerged
|name=balance filter updates
|version=4.7
|text=Conversion to data/DUP profile possible through balance filters -- on multiple-device filesystems.
|note=mkfs.btrfs allows creating DUP on multiple devices since 4.5.1
}}
|}

= By version (btrfs-progs) =

Tarballs: https://www.kernel.org/pub/linux/kernel/people/kdave/btrfs-progs/ ([http://article.gmane.org/gmane.comp.file-systems.btrfs/38063/ announcement])

== btrfs-progs 4.6 (Jun 2016) ==

* convert - major rewrite:
** fix a long-standing bug that led to mixing data blocks into metadata block groups
** the workaround was to do full balance after conversion, which was recommended practice anyway
** explicitly set the lowest supported version of e2fstools to 1.41
* provide and install udev rules file that addresses problems with device mapper devices, renames after removal
* send: new option: quiet
* dev usage: report slack space (device size minus filesystem area on the dev)
* image: support DUP
* build: short options to enable debugging builds
* other:
** code cleanups
** build fixes
** more tests and other enhancements

== btrfs-progs 4.5 (Mar 2016) ==

* new/moved commands
** btrfs-show-super -> btrfs inspect-internal dump-super
** btrfs-debug-tree -> btrfs inspect-internal dump-tree
* new commands
** btrfs fi du - calculate disk usage, including shared extents
* enhancements
** device delete - delete by id (needs kernel support, not merged to 4.6)
** check - new option to specify chunk root
** debug-tree/dump-tree - option -t understands human readable name of the tree (along numerical ids)
** btrfs-debugfs - can dump block group information
* bugfixes
** all commands should accept the option separator "--"
** several fixes in device scan
** restore works on filesystems with sectorsize > 4k
** debug-tree/dump-tree - print compression type as string
** subvol sync: fix crash, memory corruption
** argument parsing fixes: subvol get-default, qgroup create/destroy/assign, inspect subvolid-resolve
** check for block device or regular file in several commands
* other
** documentation updates
** manual pages for the moved tools now point to btrfs-filesystem
** testsuite updates

=== btrfs-progs 4.5.1 (Mar 2016) ===
* mkfs: allow DUP on multi-device filesystems
* bugfixes: build fixes, assorted other fixes

=== btrfs-progs 4.5.2 (May 2016) ===
* new/moved command: btrfs-calc-stats -> btrfs inspect tree-stats
* check: fix false alert for metadata blocks crossing stripe boundary
* check: catch when qgroup numbers mismatch
* check: detect running quota rescan and report mismatches
* balance start: add safety delay before doing a full balance
* fi sync: is now silent
* fi show: don't miss filesystems with partially matching uuids
* dev ready: accept only one argument for device
* dev stats: print "devid:N" for a missing device instead of "(null)"
* other:
** lowest supported version of e2fsprogs is 1.41
** minor cleanups, test updates

=== btrfs-progs 4.5.3 (Mar 2016) ===
* ioctl: fix unaligned access in buffer from TREE_SEARCH; might cause SIGBUS on architectures that do not support unaligned access and do not performa any fixups
* improved validation checks of superblock and chunk-related structures
* subvolume sync: fix handling of -s option
* balance: adjust timing of safety delay countdown with --full-balance
* rescue super-recover: fix reversed condition check
* check: fix bytes_used accounting
* documentation updates: mount options, scrub, send, receive, select-super, check, mkfs
* testing: new fuzzed images, for superblock and chunks

== btrfs-progs 4.4 (Jan 2016) ==

User visible changes:

* mkfs.btrfs --data dup

People asked about duplicating data on a single device for a long time. There
are no technical obstacles preventing that, so it got enabled with a warning
about potential dangers when the device will not do the duplicated copies.
See mkfs.btrfs section ''DUP PROFILES ON A SINGLE DEVICE''.

* support balance filters added/enhanced in linux 4.4
** usage=min..max	-- enhanced to take range
** stripes=min..max	-- new, filter by stripes for raid0/10/5/6
** limit=min..max	-- enhanced to take range

Noe: due to backward compatibility, the range maximum for 'usage' is not inclusive as for the others, to keep the same behaviour as usage=N .

* manual pages enhanced (btrfs, mkfs, mount, filesystem, balance)

* error messages updates, rewordings -- some fstests may break due to that

* added support for free-space-tree implementation of space cache -- ''this requires kernel 4.5 and is not recommended for non-developers yet''

* ''btrfs filesystem usage'' works with mixed blockgroups

Other:

* installation to /usr/local -- this has unintentionally changed during conversion to autotools in 3.19
* check: fix a false alert where extent record has wrong metadata flag
* improved stability on fuzzed/crafted images when reading sys array in superblock
* build: the 'ar' tool is properly deteced during cross-compilation
* debug-tree: option -t understands ids for tree root and chnuk tree
* preparatory work for btrfs-convert rewrite
* sparse, gcc warning fixes
* more memory allocation failure handling
* cleanups
* more tests

Bugfixes:

* chunk recovery: fix floating point exception
* chunk recovery: endianity bugfix during rebuild
* mkfs with 64K pages and nodesize reported superblock checksum mismatch
* check: properly reset nlink of multi-linked file

=== btrfs-progs 4.4.1 (Feb 2016) ===

* find-root: don't skip the first chunk
* free-space-tree compat bits fix
* build: target symlinks
* documentation updates
* test updates

== btrfs-progs 4.3 (Nov 2015) ==

* mkfs
** mixed mode is not forced for filesystems smaller than 1GiB
** mixed mode broken with mismatching sectorsize and nodesize, fixed
** print version info earlier
** print devices sorted by id
** do not truncate target image with --rootsize
* fi usage:
** don't print global block reserve
** print device id
** minor output tuning
** other cleanups
* calc-size:
** div-by-zero fix on an empty filesystem
** fix crash
* bugfixes:
** more superblock sanity checks
** consistently round size of all devices down to sectorsize
** misc leak fixes
** convert: don't try to rollback with a half-deleted ext2_saved subvolume
* other:
** check: add progress indicator
** scrub: enahced error message
** show-super: read superblock from a given offset
** add README
** docs: update manual page for mkfs.btrfs, btrfstune, balance, convert and inspect-internal
** build: optional build with more warnings (W=...)
** build: better support for static checkers
** build: html output of documentation
** pretty-print: last_snapshot for root_item
** pretty-print: stripe dev uuid
** error reporting wrappers, introduced and example use
** refactor open_file_or_dir
** other docs and help updates
* testing:
** test for nodes crossing stripes
** test for broken 'subvolume sync'
** basic tests for mkfs, raid option combinations
** basic tests for fuzzed images (check)
** command intrumentation (eg valgrind)
** print commands if requested
** add README for tests

=== btrfs-progs 4.3.1 (Nov 2015) ===

* fixes
** device delete: recognize 'missing' again
** mkfs: long names are not trimmed when doing ssd check
** support partitioned loop devices
* other
** replace several mallocs with on-stack variables
** more memory allocation failure handling
** add tests for bugs fixed
** cmd-device: switch to new message printing helpers
** minor code cleanups

== btrfs-progs 4.2 (Sep 2015) ==

* enhancements:
** mkfs: do not create extra single chunks on multiple devices
** resize: try to guess the minimal size, 'inspect min-dev-size'
** qgroup assign: add option to schedule rescan
** chunk-recover: be more verbose about the scanning process
* fixes:
** check:
*** find stripes crossing stripe boundary -- created by convert
*** print correct range for file hole when there are no extents and learn how to fix it
** replace: more sanity checks
** convert: concurrency fixes related to reporting progress
** find-root: option -a will not skip the current root anymore
** subvol list: fix occasional crash
** do not create stripes crossing stripe boundary
* build:
** fixes for musl libc
** preliminary support for android (not working yet, more code changes needed)
** new EXTRA_CFLAGS and EXTRA_LDFLAGS
* other:
** lots of cleanups
** tests: lots of updates, new tests, framework improvements
** documentation updates
** debugging: print-tree shows stripe length

=== btrfs-progs 4.2.1 (Sep 2015) ===
* fix an off-by-one error in cross-stripe boundary check
** if nodesize was 64k, any metadata block was reported as crossing, this leads to mkfs failure for example due to "no free blocks found"
** for other nodesizes, if the end of the metadata block was 64k aligned, it was incorrectly reported by fsck
* convert: don't write uninitialized data to image
* image:
** don't loop with option -t0
** don't create threads if compression is not requested
* other: minor cleanups

=== btrfs-progs 4.2.2 (Oct 2015) ===
* fi label: use fallback if the label ioctl is not available
* convert: check nodesize constraints against commandline features (-O)
* scrub: report status 'running' until all devices are finished
* device scanning might crash in some scenarios
* fi usage: print summary for non-root users

=== btrfs-progs 4.2.3 (Oct 2015) ===
* subvol sync: make it actually work again: it's been broken since 4.1.2, due to a reversed condition it returned immediatelly instead of waiting
* scanning: do not scan already discovered filesystems (minor optimization)
* convert: better error message in case the filesystem is not finalized
* restore: off-by-one symlink path check fix

== btrfs-progs 4.1 (Jun 2015) ==

* bugfixes
** fsck.btrfs: no bash-isms
** bugzilla 97171: invalid memory access (with tests)
** receive:
*** cloning works with --chroot
*** capabilities not lost
** mkfs: do not try to register bare file images
** option --help accepted by the standalone utilities
* enhancements
** corrupt block: ability to remove csums
** mkfs:
*** warn if metadata redundancy is lower than for data
*** options to make the output quiet (only errors)
*** mixed case names of raid profiles accepted
*** rework the output:
**** more comprehensive, 'key: value' format
** subvol:
*** show:
**** print received uuid
**** update the output
**** new options to specify size units
*** sync: grab all deleted ids and print them as they're removed, previous implementation only checked if there are any to be deleted - change in command semantics
** scrub: print timestamps in days HMS format
** receive:
*** can specify mount point, do not rely on /proc
*** can work inside subvolumes
** send: new option to send stream without data (NO_FILE_DATA)
** convert: specify incompat features on the new fs
** qgroup:
*** show: distinguish no limits and 0 limit value
*** limit: ability to clear the limit
** help for 'btrfs' is shorter, 1st level command overview
** debug tree: print key names according to their C name
* new
** rescure zero-log
** btrfsune:
*** rewrite uuid on a filesystem image
*** new option to turn on NO_HOLES incompat feature
* deprecated
** standalone btrfs-zero-log
* other
** testing framework updates
*** uuid rewrite test
*** btrfstune feature setting test
*** zero-log tests
*** more testing image formats
** manual page updates
** ioctl.h synced with current kernel uapi version
** convert: preparatory works for more filesystems (reiserfs pending)
** use static buffers for path handling where possible
** add new helpers for send uilts that check memory allocations, switch all users, deprecate old helpers
** Makefile: fix build dependency generation
** map-logical: make it work again

=== btrfs-progs 4.1.1 (Jul 2015) ===

'''Do not use this version'''

* bugfixes
** defrag: threshold overflow fix
** fsck:
*** check if items fit into the leaf space
*** fix wrong nbytes
** mkfs:
*** create only desired block groups for single device
*** preparatory work for fix on multiple devices
* enhancements
** new alias for 'device delete': 'device remove'
* other
** fix compilation on old gcc (4.3)
** documentation updates
** debug-tree: print nbytes
** test: image for corrupted nbytes
** corupt-block: let it kill nbytes

=== btrfs-progs 4.1.2 (Jul 2015) ===
* urgent bugfix: mkfs creates invalid filesystem, must be recreated

== btrfs-progs 4.0 (Apr 2015) ==

* resize:
** don't accept file as an argument (it's confusing)
** print better error message in case of an error
* restore: optionally restore metadata (time, mode, uid/gid)
* receive: optionally enforce chroot
* new rescue subcommand 'zero-log', same as btrfs-zero-log, but now also part of the main utility
* check:
** free space checks match kernel, fixes incorrect reports
* convert: fix setting of checksum bit if --no-datasum is used
* fsck.btrfs: don't print messages
* fix quota rescan on PPC64 (mangled ioctl number)
* test updates
* documentation: files renamed to .asciidoc, misc fixups

=== btrfs-progs 4.0.1 (May 2015) ===

* restore:
** can restore symlinks, new option --symlinks
** long option variants added
* convert: dropped dependency on acl.h header and libacl is not required for  build
* fix for 'check' crash
* device remove error message fix
* preparatory works for fsid change

== btrfs-progs 3.19 (Mar 2015)==

* build converted to autotools
* btrfs-image
** restore can now run in parallel threads
** fixed restore of multiple image from multiple devices onto a single dev
** introduced metadump v2
* check: make --init-csum-tree and --init-extent-tree work together
* find-new: option to search through all metadata even if a root was already found
* convert: show progress by default, can be turned off
* corrupt-block: option to work on a specific root
* bash completion script for all subcommands

=== btrfs-progs 3.19.1 (Mar 2015) ===
* convert:
** new option to specify metadata block size
** --no-progress actually works
* restore: properly handle the page boundary corner case
* build fixes:
** missing macro from public header, BTRFS_BUILD_VERSION
** wrong handling of --enable-convert
* fi usage: reports correct space for degraded mounts
* other:
** mkfs: help string updates
** completion: added 'usage' subcommands
** cleanups in qgroup code, preparatory work

== btrfs-progs 3.18 (Dec 2014) ==

* mkfs - skinny-metadata feature is now on by default, first introduced in kernel 3.10
* filesystem usage - give an overview of fs usage in a way that's more comprehensible than existing 'fi df'
* device usage - more detailed information about per-device allocations
* check
** option to set a different tree root byte number
** ability to link lost files to lost+found, caused by a recent kernel bug
** repair of severely corrupted fs (use with care)
* convert - option to show progress
* subvol create - print the commit mode inline, print the global mode only if --verbose
* other updates: musl-libc support, coverity bugfixes, new test images, documentation

=== btrfs-progs 3.18.1 (Jan 2015) ===
* minor fixes
* documentation updates

=== btrfs-progs 3.18.2 (Jan 2015) ===
* qgroup show: print human readable sizes, options to say otherwise
* check: new option to explicitly say no to writes
* mkfs: message about trimming is not printed to stderr
* fi show: fixed return value
* tests: new infrastructure
* btrfstune: force flag can be used together with seeding option
* backtrace support is back
* getopt cleanups
* doc and help updates

== btrfs-progs 3.17 (Oct 2014) ==
* ''check'': --init-csum-tree actually does something useful, rebuilds the whole csum tree
* /dev scanning for btrfs devices is gone
* /proc/partitions scanning is gone, blkid is used exclusively
* new subcommand ''subvolume sync''
* ''filesystem df'': new options to set unit format
* ''convert'': allow to copy label from the origin, or specify a new one

=== btrfs-progs 3.17.1 (Nov 2014) ===
* ''fi df'': argument handling
* fix linking with libbtrfs
* ''replace'': better error reporting
* ''fi show'': fixed stall if run concurrently with ''balance''
* ''check'': fixed argument parsing for ''--subvol-extents''
* ''fi df'': SI prefixes corrected

=== btrfs-progs 3.17.2 (Nov 2014) ===
* ''check'' improvements
** add ability to replace missing dir item/dir indexes
** fix missing inode items
** create missing root dirid
* ''corrupt block'': enhancements for testing ''fsck''
* ''zero-log'': able to reset a fs with bogus log tree pointer ([https://bugzilla.kernel.org/show_bug.cgi?id=72151 bug 72151])

=== btrfs-progs 3.17.3 (Dec 2014) ===
* ''convert'': fix conversion of sparse ext* filesystems
* ''show'': resolve to the correct path
* ''fsck'': more verbose error for ''root dir'' problems

== btrfs-progs 3.16 (Aug 2014) ==
* mkfs: new option to specify UUID, drop experimental notice 
* check: new option to verify quotas, reduced memory requirements, new option to print extent sharing 
* restore: check length before decompression, more error handling, option to loop during restoring 
* balance: new filter 'limit' 
* recover: allow to read all sb copies 
* btrfstune: new option to force dangerous changes 
* receive: new option to limit number of errors 
* show-super: skip unrecognized sb, add option to force 
* debug-tree: print tree by id 
* documentation updates

=== btrfs-progs 3.16.1 (Sep 2014) ===
* print GlobalReserve in ''fi df'' output
* new option -R in ''subvol list''
* library version defines
* static build is fixed
* build without documentation is possible

=== btrfs-progs 3.16.2 (Oct 2014) ===
* a few fixes in ''fsck'' and ''image'' tools

== btrfs-progs 3.14 (Apr 2014) ==
* fsck: fixes and enhancements to --init-extent-tree mode
* fsck: chunk-recover updates
* scrub: add force option -f
* send: check if subvolumes are read-only
* subvol delete: add options to affect commit behaviour
* btrfs: add ''property'' command group
* restore: add dry-run option
* restore: fix restoring of compressed files
* mkfs: support for no-holes feature
* mkfs: option -r deals with hardlinks and relative paths
* mkfs: discard phase is interruptible
* documentation updates

=== btrfs-progs 3.14.1 (Apr 2014) ===
* properties: fix handling of option -t
* restore: fix reading of compressed extents
* minor code and doc updates

=== btrfs-progs 3.14.2 (May 2014) ===
* documentation is now written in asciidoc and there are manpages for each subcommand
* misc bugfixes

== btrfs-progs 3.12 (Nov 2013) ==
* [http://thread.gmane.org/gmane.comp.file-systems.btrfs/30403/focus=30423 announcement], [https://www.kernel.org/pub/linux/kernel/people/mason/btrfs-progs/ tarballs]
* first release after 0.19 (2009/06) with a lot of changes

= By version (linux kernel) =

=== v4.6 (May 2016) ===
* mount options:
** usebackuproot - replace 'recovery' (works but is deprecated)
** logreplay, nologreplay - disable log replay at mount time, does no writes to the device
** norecovery - synthetic option to disable recovery at mount time and disable writes (now does: nologreplay)
* default inline limit is now 2048 (instead of page size, usually 4096)
* /dev/btrfs-control now understands the GET_SUPPORTE_FEATURES ioctl
* get rid of harmless message "''could not find root %llu''"
* preparatory work for subpage-blocksize patchset
* fix bug when using overlayfs
* fixes in readahead, log replay, fsync, and more

=== v4.5 (Mar 2016) ===
* free space cache v2: an incompat feature to track the free space cache as a b-tree
* balance:
** '-dconvert=dup' supported
** continue but warn if metadata have lower redundancy than data
* fixes:
** trim does not overwrite bootloader area (introduced in 4.3, fixed in 4.4.x stable kernels)
* assorted bugfixes, improvements or cleanups

=== v4.4 (Jan 2016) ===
* send fixes: cloning, sending with parent
* improved handling of framgented space using bitmaps
* new mount option for debugging: fragment=data|metadata|all
* updated balance filters: limit, stripes, usage
* more bugfixes and cleanups

=== v4.3 (Nov 2015) ===
* fix raid56 rebuild with missing device
* discard ioctl will return the number of bytes
* more bugfixes and cleanups

=== v4.2 (Aug 2015) ===
* enhancements
** transaction abort now reports the caller, not the helper function
** INO_LOOKUP ioctl: unprivileged if used to just get the rootid (aka. subvolume id)
** unified ''subvol='' and ''subvolid='' mounting, show the mounted subvol in mount options; also, ''/proc/self/mountinfo'' now always correctly shows the mounted subvolume
** reworked internal qgroup logic
** send: use received_uuid of parent during send
** sysfs: preparatory works for exporting more stats about devices
** deduplication on the same inode works
** deduplication does not change mtime/ctime
* fixes:
** in send: cloning, renames, orphans, 
** few more ENOSPC fixes in case of block group creation/removal
** fix hang during inode eviction due to concurrent readahead
** EXTENT_SAME ioctl: handle unaligned length
** more fixes around automatic block group removal
** deadlock with EXTENT_SAME and readahead
** for feature NO_HOLES: fsync, truncate

== v4.1 (Jun 2015) ==
* fixes
** regression in chunk removal, conversion to raid1 possible again
** log tree corruption fix with ''-o discard'' mount
** bare xattr namespace attribute is not accepted
** orphan cleanup is started for implicitly mounted default subvolume
** send fixes
** cloning within same file
** EXTENT_SAME ioctl infinite loop fix
** avoid more ENOSPC in delayed-iput context
** a few ENOMEM fixes
** ''automatic empty block group removal'' fixups
* speedups
** large file deletion: run delayed refs more often
** large file deletion: don't build up too much work from crc
** transaction commit latency improved
** block group cache writeout
* qgroup:
** limits are shared upon snapshot
** allow to remove qgroup which has parent but no child
** fix status of qgroup consistency after rescan
** fix quota status bits after dsiabling
** mark qgroups inconsistent after assign/delete actions
* code cleanups

== v4.0 (Apr 2015) ==
* file creation time is stored (no easy interface to read it yet)
* fsync and log replay fixes
* lots of cleanups and other fixes

== v3.19 (Feb 2015) ==
* raid56 supports scrub and device replace

== v3.18 (Dec 2014) ==

== v3.17 (Oct 2014) ==

* fix for the infamous deadlock [https://git.kernel.org/linus/9e0af23764344f7f1b68e4eefbe7dc865018b63d]
* fixed longstanding bug in qgroups accounting after snapshot deletion [https://git.kernel.org/linus/1152651a081720ef6a8c76bb7da676e8c900ac30]
* updated (less inaccurate) ''df'' numbers [https://git.kernel.org/linus/ba7b6e62f420f5a8832bc161ab0c7ba767f65b3d]
* speedup for ''rename'' and ''truncate'', less strict flushes [https://git.kernel.org/linus/8d875f95da43c6a8f18f77869f2ef26e9594fecc]
* updated and fixes to the ''seeding'' feature

== v3.16 (Aug 2014) ==
* ''O_TMPFILE'' support [http://kernelnewbies.org/Linux_3.11#head-8be09d59438b31c2a724547838f234cb33c40357]
* reworked qgroup accounting, to fix negative numbers after subvol deletion
* SEARCH_TREE ioctl v2, extended for retrieving more data [http://www.spinics.net/lists/linux-btrfs/msg31213.html]
* new balance filter ''limit'' for more finegrained balancing [http://www.spinics.net/lists/linux-btrfs/msg33872.html]
* ioctl FS_INFO and it's sysfs counterpart export information about ''nodesize'', ''sectorsize'' and ''clone_alignment''
* snapshots are protected during send

== v3.15 (Jun 2014) ==
* pile of ''send'' fixes (stability, speed)
* worker threads now use kernel workqueues

== v3.14 (Mar 2014) ==
* optional incompat disk format improvement aiming at speedup, removing file hole representation, named ''no-holes''
* ioctl to query/change feature bits (e.g. switching on extended refs on-line now possible)
* export filesystem info through sysfs: features, allocation profiles
* added pairing mount options (for remount)
* heap of small performance optimizations
* snapshot-aware defrag was disabled due to problems

== v3.13 (Jan 2014) ==
* ''fiemap'' exports information about shared extents
* bugfix and stability foucsed release

== v3.12 (Nov 2013) ==
* Major performance improvement for send/receive with large numbers of subvolumes
* Support for batch [[deduplication]] (userspace tools required)
* new mount option ''commit'' to set the commit interval
* Lots of stability and bugfix patches

== v3.11 (Sep 2013) ==
* extent cloning within one file
* ioctl to wait for quota rescan completion
* device deletion returns error code to userspace (not in syslog anymore)
* usual load of small fixes and improvements

== v3.10 (Jun 2013) ==
* reduced size of metadata by so-called ''skinny extents'' [http://git.kernel.org/linus/3173a18f70554fe7880bb2d85c7da566e364eb3c]
* enhanced syslog message format [http://permalink.gmane.org/gmane.comp.file-systems.btrfs/24330]
* the mount option ''subvolrootid'' is deprecated
* lots of stability improvements, removed <big>many</big> <small>BUG_ONs</small> <!-- a big thing! -->
* qgroups are automatically created when quotas are enabled [http://git.kernel.org/linus/7708f029dca5f1b9e9d6ea01ab10cd83e4c74ff2]
* qgroups are able to ''rescan'' current filesystem and sync the quota state with the existing subvolumes
* enhanced ''send/recv '' format for multiplexing more data into one stream [http://git.kernel.org/linus/c2c71324ecb471c932bc1ff59e46ffcf82f274fc]
* various unsorted code cleanups, minor performance updates

== v3.9 (Apr 2013) ==
* preliminary Raid 5/6 support (details in the [http://www.spinics.net/lists/linux-btrfs/msg22169.html announcement])
* snapshot-aware defrag
* a mode of ''send'' to avoid transferring file data
* direct IO speedup ([https://patchwork.kernel.org/patch/2114921/ numbers])
* new ''ioctl''s to set/get filesystem label
* defrag is cancellable

== v3.8 (Feb 2013) ==
* ability to replace devices at runtime in an effective way ([http://lwn.net/Articles/524589/ description])
* speed improvements (cumulative effect of many small improvements)
* a few more bugfixes

== v3.7 (Dec 2012) ==
* ''fsync'' speedups
* removed limitation of number of hardlinks in a single directory
* file hole punching ([http://lwn.net/Articles/415889/ LWN article])
* per-file ''NOCOW''
* fixes to send/receive

== v3.6 (Sep 2012) ==
* subvolume-aware quotas (''qgroups'')
* support for send/receive between snapshot changes ([http://lwn.net/Articles/506244/ LWN article])
* ''atime'' is not updated on read-only snapshots ([http://lwn.net/Articles/499293/ LWN article])
* allowed cross-subvolume file clone (aka. reflink)
* remount with ''no'' compression possible
* new ioctl to read device readiness status
* speed improvement for concurrent multithreaded reads

== v3.5 (Jun 2012) ==
* collect device statistics (read/write failures, checksum errors, corrupted blocks)
* integrity checker (3.3+) supports bigblocks (3.4+)
* more friendly NFS support (native ''i_version'')
* ''thread_pool'' mount option tunable via remount
* ''fsync'' speed improvements
* several fixes related to read-only mounts
* scrub thread priority lowered to idle
* preparatory works for 3.6 features (''tree_mod_log'')

== v3.4 (May 2012) ==
* Allow metadata blocks larger than the page size (4K). This allows metadata blocks up to 64KB in size. In practice 16K and 32K seem to work best. For workloads with lots of metadata, this cuts down the size of the extent allocation tree dramatically and fragments much less. (Chris Mason)
* Improved error handling (IO errors). This gives Btrfs the ability to abort transactions and go read-only on errors other than internal logic errors and ENOMEM more gracefully instead of crashing. (Jeff Mahoney)
* Reworked the way in which metadata interacts with the page cache. page->private now points to the btrfs extent_buffer object, which makes everything faster. The code was changed so it now writes a whole extent buffer at a time instead of allowing individual pages to go down. It is now more aggressive about dropping pages for metadata blocks that were freed due to COW. Overall, metadata caching is much faster now. (Josef Bacik)

== v3.3 (Mar 2012) ==
* restriper - infrastructure to change btrfs raid profiles on the fly via balance
* optional integrity checker infrastructure ([http://lwn.net/Articles/466493/ details])
* fixed a few corner cases where TRIM did not process some blocks
* cluster allocator improvements (less fragmentation, some speedups)

== v3.2 (Jan 2012) ==
* Log of past roots to aid recovery (option ''recovery'')
* Subvolumes mountable by full path
* Added ''nospace_cache'' option
* Lots of space accounting fixes
* Improved scrub performance thanks to new read-ahead infrastructure
* Scrub prints paths of corrupted files
* ioctl for resolving logical->inode and inode->path
* Integrated raid-repair (if possible)
* Data corruption fix for parallel snapshot creation
* Write barriers for multiple devices were fixed to be more resistant in case of power failure

== v3.1 (Oct 2011) ==
* Stability fixes (lots of them, really), notably fixing early ENOSPC, improved handling of a few error paths and corner cases, fix for the crash during log replay.

== v3.0 (Jul 2011) ==
* Filesystem scrub
* Auto-defragmentation (autodefrag mount option)
* Improved block allocator
* Sped up file creation/deletion by delayed operation

== v2.6.39 (May 2011) ==

Per-file compression and NOCOW control. Support for bulk TRIM on SSDs.

== v2.6.38 (March 2011) ==

Added LZO compression method, FIEMAP bugfixes with delalloc, subvol flags get/set ioctl, allow compression during defrag.

== v2.6.37 (January 2011) ==

On-disk free space cache, asynchronous snapshots, unprivileged subvolume deletion, extent buffer switches from a rbtree with spinlocks to a radix tree with RCU. (Explanations of these features are described in [http://www.linux-mag.com/id/7945 this] article [registration needed]).

== v2.6.35 (August 2010) ==

Direct I/O support and -ENOSPC handling of volume management operations, completing the -ENOSPC support.

== v2.6.34 (May 2010) ==

Support for changing the default subvolume, a new userspace tool (btrfs), an ioctl that lists all subvolumes, an ioctl to allow improved df math, and other improvements.

== v2.6.33 (February 2010) ==

Some minor -ENOSPC improvements.

== v2.6.32 (December 2009) ==

=== -ENOSPC ===

Btrfs has not had serious -ENOSPC ("no space") handling, the COW oriented design makes handling such situations more difficult than filesystems that just rewrite the blocks. In this release Josef Bacik (Red Hat) has added the necessary infrastructure to fix that problem. Note: The filesystem may run out of space and still show some free space. That space comes from a data/metadata chunk that can't get filled because there's not space left to create its metadata/data counterpart chunk. This is unrelated to the -ENOSPC handling and will be fixed in the future. Code: [http://git.kernel.org/linus/9ed74f2dba6ebf9f30b80554290bfc73cc3ef083 (commit)]

=== Proper snapshot and subvolume deletion ===

In the last btrfs-progs version you have options that allow to delete snapshots and subvolumes without having to use rm. This is much faster because it does the deletion via btree walking. It's also now possible to rename snapshots and subvols. Work done by Yan Zheng (Oracle). Code: [http://git.kernel.org/linus/4df27c4d5cc1dda54ed7d0a8389347f2df359cf9 (commit 1)], [http://git.kernel.org/linus/76dda93c6ae2c1dc3e6cde34569d6aca26b0c918 2)]

=== Performance improvements ===

Streaming writes on very fast hardware were previously CPU bound at around 400MB/s. Chris Mason (Oracle) has improved the code so that now it can push over 1GB/s while using the same CPU as XFS (factoring out checksums). There are also improvements for writing large portions of extents, and other workloads. Multidevice setups are also much faster due to the per-BDI writeback changes. The performance of fsync() was greatly improved, which fixed a severe slowdown while using yum in Fedora 11.

=== Support for "discard" operation on SSD devices ===

"Discard" support is a way to telling SSD devices which blocks are free so that the underlying firmware knows that it's safe to do some optimizations [http://git.kernel.org/linus/e244a0aeb6a599c19a7c802cda6e2d67c847b154 (commit)], [http://git.kernel.org/linus/0634857488ec6e28fa22920cd0bee3c2ac07ccfd (commit)]

== v0.19 (June 2009) ==

v0.19 is a forward rolling format change, which means that it can read the v0.18 disk format but older kernels and older btrfs-progs code will not be able to read filesystems created with v0.19. The new code changes the way that extent back references are recorded, making them significantly more efficient. In general, v0.19 is a dramatic speed improvement over v0.18 in almost every workload.

The v0.19 utilities are meant for use with kernels 2.6.31-rc1 and higher. Git trees are available with the new format code for 2.6.30 kernels, please see the download section for details.

If you do not wish to roll forward to the new disk format, use the v0.18 utilities.

== v0.18 (January 2009) ==

v0.18 has the same disk format as 0.17, but a bug was found in the ioctl interface shared between 32 bit and 64 bit programs. This was fixed by changing the ioctl interface. Anyone using 2.6.29-rc2 will need to update to v0.18 of the btrfs progs.

There is no need to reformat though, the disk format is still compatible.

== v0.17 (January 2009) ==

=== Btrfs is now in 2.6.29-rc1! ===

v0.17 has a new disk format since v0.16. Future releases will try to maintain backwards compatibility with this new format.

=== Compression ===

Transparent zlib compression of file data is enabled by mount -o compress.

=== Improved block allocation routines (Josef Bacik) ===

Many performance problems in the allocator are addressed in this release

=== Improved block sharing while moving extents (Yan Zheng) ===

The btrfs-vol commands to add, remove and balance space across devices triggers a COW of metadata and data blocks. This release is much better at maintaining shared blocks between snapshots when that COW happens.

=== Seed Device support ===

It is now possible to create a filesystem to seed other Btrfs filesystems. The original filesystem and devices are included as a readonly starting point to the new FS. All modifications go onto different devices and the COW machinery makes sure the original is unchanged.

=== Many bug fixes and performance improvements ===

== v0.16 (August 2008) ==

v0.16 does change the disk format from v0.15, and it includes a long list of performance and stability updates.

=== Fine grained Btree locking ===

Locking is now done in a top down fashion while searching the btree, and higher level locks are freed when they are no longer required. Extent allocations still have a coarse grained lock, but that will be improved in the next release.

=== Improved data=ordered ===

Ordered data mode loosely means any system that prevents garbage or stale data blocks after a crash. It was previously implemented the same way ext3 does it, which is to force pending data writes down before a transaction commits.

The data=ordered code was changed to only modify metadata in the btree after data extents are fully written on disk. This allows a transaction commit to proceed without waiting for all the data writes on the FS to finish.

A single fsync or synchronous write no longer forces all the dirty data on the FS to disk, as it does in ext3 and reiserfsv3.

Although it is not implemented yet, the new data=ordered code would allow atomic writes of almost any size to a single file to be exported to userland.

=== ACL support (Josef Bacik) ===

ACLs are implemented and enabled by default.

=== Lost file prevention (Josef Bacik) ===

The VFS and posix APIs force filesystems allow files to be unlinked from a directory before they are deleted from the FS. If the system crashes between the unlink and the deletion, the file is still consuming space on disk, but not listed in any directory.

Btrfs now tracks these files and makes sure they are reclaimed if the system crashes before they are fully deleted.

=== New directory index format (Josef Bacik) ===

Btrfs indexes directories in two ways. The first index allows fast name lookups, and the second is optimized to return inodes in something close to disk order for readdir. The second index is an important part of good performance for full filesystem backups.

A per-directory sequence number is now used for the second index, removing some worst case conditions around files that are hard linked into the same directory many times.

=== Faster unmount times (Yan Zheng) ===

Btrfs waits for old transactions to be completely removed from the FS before unmount finishes. A new reference count cache was added to make this much less IO intensive, improving FS performance in all workloads.

=== Improved streaming reads and writes ===

The new data=ordered code makes streaming writes much faster. Streaming reads are improved by tuning the thread pools used to process data checksums after the read is done. On machines with sufficient CPU power to keep up with the disks, data checksumming is able to run as fast as nodatasum mounts.

== v0.15 (May 29, 2008) ==

* Metadata back references
* Online growing and shrinking
* Conversion program from Ext3
* data=ordered support
* COW-free data writes.
* focus on stability fixes for the multiple device code

== v0.14 (April 30, 2008) ==

* Support for multiple devices
* raid0, raid1 and raid10, single spindle metadata duplication

== v0.13 and older ==

* Copy on write FS
* Checksumming
* Transactions
* Snapshotting
* Subvolumes