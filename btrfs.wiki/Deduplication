Due to its copy-on-write nature, BTRFS is able to copy files (eg with <code>cp --reflink</code>) or subvolumes (with <code>btrfs subvolume snapshot</code>) without actually copying the data. A new copy of the data is created if one of the files or subvolumes is updated.

Deduplication takes this a step further, by actively identifying when the same data has been written twice, and retrospectively combining them into an extent with the same copy-on-write semantics.

= Batch =

Out of band / batch deduplication is deduplication done outside of the write path.  We've sometimes called it [http://www.ssrc.ucsc.edu/pub/jones-ssrctr-11-03.html offline] deduplication, but that can confuse people: btrfs dedup involves the kernel and always happens on ''mounted'' filesystems. To use out-of-band deduplication, you run a tool which searches your filesystem for identical blocks, and then deduplicates them.

== duperemove ==

From the [https://github.com/markfasheh/duperemove/blob/master/README.md README] for [https://github.com/markfasheh/duperemove duperemove]:

<blockquote>
Duperemove is a simple tool for finding duplicated extents and
submitting them for deduplication. When given a list of files it will
hash their contents on a block by block basis and compare those hashes
to each other, finding and categorizing extents that match each
other. When given the -d option, duperemove will submit those
extents for deduplication using the btrfs-extent-same ioctl.
</blockquote>

This tool finds and lists duplicate extents, and optionally will submit the duplicates to the kernel for deduplication.

== bedup ==

'''[https://github.com/g2p/bedup bedup]''' implements incremental whole-file batch deduplication for Btrfs.

bedup supports mainline kernels (Linux 3.3 is required by the file locking implementation, 3.6 is required for cross-subvolume operation), using the clone ioctl (which exposes Btrfs's copy-on-write functionality).

An ioctl dedicated to batch deduplication was merged in Linux 3.12.  It brings in-kernel locking (btrfs guarantees that the deduplicated data is identical without the need for outside locks), better support for read-only snapshots, and retains the features and much of the implementation of the clone ioctl.  There is an experimental [https://github.com/g2p/bedup/tree/wip/dedup-syscall bedup branch] using the new ioctl, but it is not the default because it can trigger kernel crashes as of Linux 4.2.

== rmlint ==

'''[https://rmlint.readthedocs.io/en/latest/ rmlint]''' is a duplicate file finder with btrfs support.  To find and reflink duplicate files:

 $ rmlint -T df --config=sh:handler=clone [paths...]   # finds duplicates under paths and creates a batch file 'rmlint.sh' for post-processing
                                                       # ...review contents of rmlint.sh, then:
 $ ./rmlint.sh                                         # clones/reflinks duplicates (if possible)

Note if reflinking read-only snapshots, rmlint.sh must be run with -r option and with root priveleges, eg:

 $ sudo ./rmlint.sh -r

== btrfs-dedupe ==

'''[http://btrfs-dedupe btrfs-dedupe]''' implements incremental whole-file batch deduplication for Btrfs. It is written in rust for safety and performance and uses the ioctl to offload the actual deduplication to the kernel safely.

It is at an early stage of development, in terms of features, but it works, and should not cause corruption unless there are bugs in the filesystem or hardware issues.

== fdupes ==

'''[https://github.com/adrianlopezroche/fdupes fdupes]''' is a tool for finding duplicate files, and it has a variety of actions it can take on finding them. It has no direct support for BTRFS deduplication, but it can be combined with another tool (eg '''duperemove'''), or a custom script, as part of a toolchain to perform custom deduplication tasks.

== jdupes ==

'''[https://github.com/jbruchon/jdupes jdupes]''' is a fork of '''fdupes''' which includes support for BTRFS deduplication when it identifies duplicate files.

== Other tools ==

Now that the ioctl has been lifted to the VFS layer, rather than being a BTRFS-specific function, deduplication functionality can be implemented in a filesystem-independent way.

As such, '''[https://linux.die.net/man/8/xfs_io xfs_io]''', is able to perform deduplication on a BTRFS file system, and provides a simple way to invoke the deduplication function from the command line, on any filesystem which supports the ioctl.

= Inband =

Inband / synchronous / inline deduplication is deduplication done in the write path, so it happens as data is written to the filesystem. This typically requires large amounts of RAM to store the lookup table of known block hashes. [http://www.mail-archive.com/linux-btrfs%40vger.kernel.org/msg32862.html Patches] are currently being worked on.

[[Category: Features]]